<?php
// $Id$

/**
 * Implements hook_menu().
 */
function kw_djambi_menu() {
  $items['djambi/%/check-update/%'] = array(
    'page callback' => 'kw_djambi_check_update',
    'page arguments' => array(1, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function kw_djambi_permission() {
  return array(
    'administer djambi games' => array(
      'title' => t('Administer djambi games'),
      'description' => t('Perform administrative tasks dealing with djambi games.')
    )
  );
}

/**
 * Implements hook_theme().
 */
function kw_djambi_theme() {
  return array(
    'djambi_grid' => array(
        'render element' => 'form',
        'file' => 'kw_djambi.theme.inc'
     ),
     'djambi_recruiting_phase' => array(
         'render element' => 'form',
         'file' => 'kw_djambi.theme.inc'
     )
  );
}

/**
 * Implements hook_cron().
 */
function kw_djambi_cron() {
  $q = db_select('djambi_node', 'dj');
  $q->fields('dj', array('nid'));
  $q->condition('dj.autodelete', time(), '<');
  $q->condition('dj.autodelete', 0, '!=');
  $nids = $q->execute()->fetchCol('nid');
  if (!empty($nids)) {
    node_delete_multiple($nids);
  }
}

/**
 * Implements hook_node_info().
 * Création d'un nouveau type de contenu "partie de Djambi".
 */
function kw_djambi_node_info() {
  return array(
    'kw_djambi' => array(
      'name' => t('Djambi game'),
      'base' => 'node_content',
      'description' => t('Create a new machiavelli chess game.'),
      'has_title' => FALSE,
      'locked' => TRUE
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function kw_djambi_form_kw_djambi_node_form_alter(&$form, &$form_state) {
  if (!$form["nid"]["#value"]) {
    $form['actions']['submit']['#value'] = t('Begin game');
    $form['basics'] = array(
        '#type' => 'fieldset',
        '#title' => t('Game presets')
    );
    $nb_players_options = DjambiBattlefield::getAvailbaleNumberPlayers();
    foreach ($nb_players_options as $option => $description) {
      $nb_players_options[$option] = _kw_djambi_get_translatable_messages($description);
    }
    $form['basics']['nb_players'] = array(
        '#type' => 'radios',
        '#title' => t('Number of players'),
        '#default_value' => '4std',
        '#options' => $nb_players_options
    );
    $mode_options = DjambiBattlefield::getModes(TRUE);
    foreach ($mode_options as $option => $description) {
      $mode_options[$option] = _kw_djambi_get_translatable_messages($description);
    }
    $form['basics']['mode'] = array(
        '#type' => 'radios',
        '#title' => t('Game mode'),
        '#default_value' => KW_DJAMBI_MODE_SANDBOX,
        '#options' => $mode_options
    );
    $form['advanced'] = array(
        '#type' => 'fieldset',
        '#title' => t('Advanced options'),
        '#tree' => TRUE,
        '#collapsible' => TRUE,
        '#collapsed' => TRUE
    );
    $form['#attached']['css'][] = drupal_get_path('module', 'kw_djambi').'/kw_djambi.css';
    $defaults = DjambiBattlefield::getOptionsInfo();
    $nb_rule = 0;
    $nb_option = 0;
    foreach($defaults as $option => $data) {
      if ($data['configurable']) {
        $form['advanced'][$option] = array(
            '#type' => $data['widget'],
            '#default_value' => $data['default']
        );
        if (!empty($data['title'])) {
          $form['advanced'][$option]['#title'] = _kw_djambi_get_translatable_messages($data['title']);
        }
        if ($data['type'] == 'rule_variant') {
          $nb_rule++;
          $form['advanced'][$option]['#prefix'] = '<span class="rule-variant">' . t('Rule variant #!number', array('!number' => str_pad($nb_rule, 2, '0', STR_PAD_LEFT))) . '</span>';
        }
        elseif ($data['type'] == 'game_option') {
          $nb_option++;
          $form['advanced'][$option]['#prefix'] = '<span class="game-option">' . t('Game option #!number', array('!number' => str_pad($nb_option, 2, '0', STR_PAD_LEFT))) . '</span>';
        }
        if (in_array($data['widget'], array('radios', 'select'))) {
          $choices = array();
          foreach ($data['choices'] as $choice_key => $description) {
            $choices[$choice_key] = _kw_djambi_get_translatable_messages($description, array('!value' => $choice_key));
          }
          $form['advanced'][$option]['#options'] = $choices;
        }
      }
    }
    $form['#submit'] = array('kw_djambi_new_game_submit');
  }
  else {
    $node = $form["#node"];
    $grid = _kw_djambi_load_game($node);
    if (user_access('administer djambi games')) {
      if ($grid->getMode() == KW_DJAMBI_MODE_SANDBOX) {
        $form['djambi_mode'] = array(
            '#type' => 'value',
            '#value' => $grid->getMode()
        );
        $form['no_autodelete'] = array(
            '#type' => 'checkbox',
            '#title' => t('Do not autodelete this game'),
            '#description' => t('Finished or inactive games are automatically removed after an amount of time.'
                .' Check this box to keep this game alive.'),
            '#default_value' => $grid->getInfo('autodelete') == 0 ? 1 : 0,
            '#return_value' => 1
        );
        $form['#submit'][] = 'kw_djambi_node_form_extra_submit';
      }
    }
  }
}

/**
 * Soumission d'un formulaire de création de contenu de type kw_djambi.
 * Création d'une nouvelle partie
 * @param String $mode
 */
function kw_djambi_new_game_submit($form, &$form_state) {
  global $user;
  $node = $form['#node'];
  $game_id = variable_get('kw_djambi_game_sequence', 0);
  $game_id++;
  $node->title = t("Machiavelli chess - Game #!i", array("!i" => $game_id));

  $mode = $form_state["values"]["mode"];
  $cookie = _kw_djambi_cookie();
  if ($mode == KW_DJAMBI_MODE_SANDBOX) {
    _kw_djambi_check_user_already_playing($user, $mode, $cookie);
    $node->dj_status = KW_DJAMBI_STATUS_PENDING;
  }
  elseif ($mode == KW_DJAMBI_MODE_FRIENDLY) {
    $node->dj_status = KW_DJAMBI_STATUS_RECRUITING;
  }

  $disposition = $form_state['values']['nb_players'];
  switch ($disposition) {
    case('2std'):
      $players = array(
        1 => 'human',
        2 => 'vassal',
        3 => 'human',
        4 => 'vassal'
      );
      break;
    default:
      $players = array_fill(1, 4, 'human');
  }
  $node->dj_players = count($players);
  $node->dj_mode = $mode;
  $node->dj_begin = time();
  $node->dj_delete = _kw_djambi_autodelete_time();

  foreach ($players as $key => $player) {
    switch ($player) {
      case('human'):
        if ($mode == KW_DJAMBI_MODE_SANDBOX || ($key == 1 && $mode == KW_DJAMBI_MODE_FRIENDLY)) {
          $data['ip'] = $_SERVER['REMOTE_ADDR'];
          if ($mode != KW_DJAMBI_MODE_SANDBOX) {
            $data['ping'] = $data['joined'] = time();
          }
          $node->dj_users[$key] = array(
            'uid' => $user->uid,
            'data' => $data,
            'status' => KW_DJAMBI_USER_READY,
            'cookie' => $cookie
          );
        }
        else {
          $node->dj_users[$key] = array(
            'uid' => 0,
            'data' => array(),
            'status' => KW_DJAMBI_USER_EMPTY_SLOT,
            'cookie' => NULL
          );
        }
        break;
      case('vassal'):
        $node->dj_users[$key] = array(
          'uid' => 0,
          'data' => array(),
          'status' => KW_DJAMBI_USER_VASSALIZED,
          'cookie' => NULL
        );
        break;
    }
  }

  $factions_data = DjambiPoliticalFaction::buildFactionsInfos();
  $factions = array();
  $i = 0;
  foreach($factions_data as $key => $faction_data) {
    $i++;
    if ($i > $node->dj_players) {
      break;
    }
    $faction = new DjambiPoliticalFaction($node->dj_users[$i], $key,
        $faction_data);
    $factions[$i] = $faction;
  }

  $grid = new DjambiBattlefield(0, TRUE, array('factions' => $factions, 'sequence' => $game_id));
  foreach ($form_state['values']['advanced'] as $option => $value) {
    $grid->setOption($option, $value);
  }

  $node->dj_data = $grid->toDatabase();
  $node->dj_prepared = TRUE;
  $node->dj_battlefield = $grid;
  variable_set('kw_djambi_game_sequence', $game_id);
}

/**
 * Soumission d'un formulaire de création de contenu de type kw_djambi.
 * Traitement des champs réservés aux administrateurs.
 */
function kw_djambi_node_form_extra_submit($form, &$form_state) {
  if (user_access('administer djambi games') && isset($form_state['values']['no_autodelete'])) {
    $q = db_update('djambi_node')
    -> fields(array('autodelete' => $form_state['values']['no_autodelete'] == 1 ? 0 :
        _kw_djambi_autodelete_time()))
    -> condition('nid', $form['#node']->nid)
    -> execute();
  }
}

/**
 * Ajout d'un cookie identifiant un visiteur anonyme.
 */
function _kw_djambi_cookie() {
  global $user;
  // Création d'un cookie si l'utilisateur est anonyme
  if($user->uid == 0) {
    if (empty($_COOKIE['Drupal_visitor_djambi_cookie_id'])) {
      $cookie = uniqid();
      user_cookie_save(array('djambi_cookie_id' => $cookie));
    }
    else {
      $cookie = $_COOKIE['Drupal_visitor_djambi_cookie_id'];
    }
  }
  else {
    $cookie = NULL;
  }
  return $cookie;
}

/**
 * Vérification : l'utilisateur courant participe-t-il déjà à une partie ?
 */
function _kw_djambi_check_user_already_playing($user, $mode, $cookie) {
  // Recherche d'une partie en cours pour l'utilisateur courant
  $q = db_select("djambi_users", "u");
  $q->join("djambi_node", "n", "n.nid = u.nid");
  $q->join("node", "n2", "n.nid = n2.nid");
  $q->fields("n", array("nid"));
  $q->fields("n2", array("created"));
  $q->condition("n.status", array(KW_DJAMBI_STATUS_PENDING, KW_DJAMBI_STATUS_DRAW_PROPOSAL));
  $q->condition("n.mode", $mode);
  $q->condition("u.uid", $user->uid);
  if ($user->uid == 0 && !is_null($cookie)) {
    $q->condition('u.cookie', $cookie);
  }
  $results = $q->execute()->fetchAll();
  // Si partie en cours : redirection
  if ($results) {
    $result = current($results);
    drupal_set_message(t("You already have begun a !game on !date. "
        . "This game does not seem to be finished : "
        . " switching back to the last played move of the game.",
        array("!date" => format_date($result->created),
            "!game" => _kw_djambi_get_translatable_messages($mode))
    ));
    drupal_goto("node/" . $result->nid);
  }
}

/**
 * Implements hook_insert().
 */
function kw_djambi_node_insert($node) {
  if ($node->type == 'kw_djambi' && isset($node->dj_prepared) && $node->dj_prepared) {
    /* @var $battlefield DjambiBattlefield  */
    $battlefield = $node->dj_battlefield;
    $record = array(
      'nid' => $node->nid,
      'mode' => $node->dj_mode,
      'points' => 0,
      'status' => $node->dj_status,
      'nb_moves' => 0,
      'data' => $node->dj_data,
      'begin' => $node->dj_begin,
      'changed' => $node->dj_begin,
      'autodelete' => $node->dj_delete,
      'compressed' => 0
    );
    drupal_write_record('djambi_node', $record);
    $factions = $battlefield->getFactions();
    /* @var $faction DjambiPoliticalFaction */
    foreach ($factions as $key => $faction) {
      $user = current($node->dj_users);
      $record = array(
        'nid' => $node->nid,
        'uid' => $user['uid'],
        'status' => $user['status'],
        'faction' => $faction->getId(),
        'data' => $user['data'],
        'cookie' => $user['cookie']
      );
      drupal_write_record('djambi_users', $record);
      if (next($node->dj_users) === FALSE) {
        break;
      }
    }
  }
}

/**
 * Implements hook_delete().
 */
function kw_djambi_node_delete($node) {
  db_delete("djambi_users")->condition("nid", $node->nid)->execute();
  db_delete("djambi_node")->condition("nid", $node->nid)->execute();
}

/**
 * Implements hook_node_view().
 */
function kw_djambi_node_view($node, $view_mode) {
  if ($node->type == "kw_djambi" && $view_mode =="full") {
    $node->content["grid"] = drupal_get_form("kw_djambi_game_form", $node);
  }
}

/**
 * Callback : permet de vérifier si un contenu de type kw_djambi a été mis à jour
 *   pendant la consultation de la page.
 */
function kw_djambi_check_update($nid, $version) {
  $query = db_select('djambi_node', 'dj')
    ->fields('dj', array('changed'))
    ->condition('dj.nid', $nid);
  $result = $query->execute()->fetchColumn();
  $return['changed'] = ($result > $version) ? 1 : 0;
  if (!$return['changed']) {
    global $user;
    $return['time-elapsed'] = kw_tools_duration(time() - $result);
    $return['time-last-update'] = format_date(time(), 'custom', 'H:i:s');
    $query = db_select('djambi_users', 'u')
      ->fields('u', array('djuid', 'data', 'uid', 'cookie', 'status'))
      ->condition('u.nid', $nid)
      ->condition('u.status', array('vassalized', 'empty'), 'NOT IN');
    $players = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    $cookie = _kw_djambi_cookie();
    foreach ($players as $player) {
      $data = unserialize($player['data']);
      if (($player['uid'] > 0 && $user->uid == $player['uid']) ||
          (!empty($cookie) && $player['cookie'] == $cookie)) {
        $data = _kw_djambi_update_user_infos($data, $player['djuid']);
      }
      $ping = _kw_djambi_format_ping_infos($data['ping']);
      $return['pings'][$player['djuid']] = array(
        'status' => $ping['status'],
        'title' => $ping['title'],
        'class' => $ping['class'],
        'joined' => format_interval(time() - $data['joined'])
      );
    }
  }
  echo drupal_json_encode($return);
  die();
}


function _kw_djambi_format_ping_infos($ping_time) {
  $ping['title'] = t("Last connection information sent by this player : !time",
      array('!time' => format_date($ping_time, 'short')));
  $ping_interval = time() - $ping_time;
  if ($ping_interval < 60) {
    $ping['status'] = 'OK';
    $ping['class'] = 'ok';
  }
  elseif ($ping_interval < 60 * 5) {
    $ping['status'] = 'Warning';
    $ping['class'] = 'warning';
  }
  else {
    $ping['status'] = 'Failed !';
    $ping['class'] = 'error';
  }
  return $ping;
}

/**
 * Chargement des données concernant la partie en cours.
 * @param object $node : node de type kw_djambi
 * @return DjambiBattlefield
 */
function _kw_djambi_load_game($node) {
  $query = db_select('djambi_node', 'dj')
      ->fields('dj', array('nid', 'data', 'status', 'mode', 'compressed', 'autodelete', 'changed'))
      ->condition('dj.nid', $node->nid);
  $result = $query->execute()->fetchAssoc();
  $query = db_select('djambi_users', 'dju')
    ->fields('dju', array('djuid', 'uid', 'faction', 'cookie', 'status', 'ranking', 'data'))
    ->condition("dju.nid", $node->nid);
  $users_result = $query->execute()->fetchAll();
  $users = array();
  foreach($users_result as $key => $user) {
    $users[$user->faction] = array(
        'djuid' => $user->djuid,
        'uid' => $user->uid,
        'cookie' => $user->cookie,
        'status' => $user->status,
        'ranking' => $user->ranking
    );
    if (!empty($user->data)) {
      $user_data = unserialize($user->data);
      if (is_array($user_data)) {
        foreach ($user_data as $label => $data) {
          if (!isset($users[$user->faction][$label])) {
            $users[$user->faction][$label] = $data;
          }
        }
      }
    }
  }
  $data = $result['data'];
  if ($result['compressed']) {
    $data = gzuncompress($data);
  }
  $data = unserialize($data);
  $data["users"] = $users;
  $battlefield = new DjambiBattlefield($result["nid"], FALSE, $data);
  $battlefield->setMode($result["mode"]);
  $battlefield->setStatus($result["status"]);
  $battlefield->setInfo('autodelete', $result['autodelete']);
  $battlefield->setInfo('changed', $result['changed']);
  $battlefield->play();
  return $battlefield;
}

/**
 * Sauvegarde en BdD du jeu
 * @param DjambiBattlefield $grid
 */
function _kw_djambi_save_game(DjambiBattlefield $grid) {
  $compress = FALSE;
  if ($grid->getStatus() == KW_DJAMBI_STATUS_FINISHED) {
    $compress = TRUE;
  }
  $data = serialize($grid->toDatabase());
  if ($compress) {
    $data = gzcompress($data);
  }
  $query1 = db_update('djambi_node');
  $moves = 0;
  foreach ($grid->getMoves() as $move) {
    if ($move['type'] == 'move') {
      $moves++;
    }
  }
  $autodelete_option = 'std';
  if ($grid->isFinished() && in_array($grid->getMode(), array(KW_DJAMBI_MODE_FRIENDLY))) {
    $autodelete_option = 'extended';
  }
  $query1->fields(array(
      'nb_moves' => $moves,
      'data' => $data,
      'changed' => time(),
      'status' => $grid->getStatus(),
      'autodelete' => $grid->getInfo('autodelete') == 0 ? 0 : _kw_djambi_autodelete_time($autodelete_option),
      'compressed' => $compress ? 1 : 0
  ));
  $query1->condition('nid', $grid->getId());
  $query1->execute();
  foreach ($grid->getFactions() as $key => $faction) {
    $record = array(
        'status' => $faction->getStatus(),
        'ranking' => $faction->getRanking(),
        'djuid' => $faction->getUserData('djuid')
    );
    if ($faction->getStatus() == KW_DJAMBI_USER_EMPTY_SLOT) {
      $record['uid'] = 0;
      $record['data'] = array();
      $record['cookie'] = NULL;
    }
    drupal_write_record('djambi_users', $record, array('djuid'));
  }
}

/**
 * Mise à jour du ping et de l'IP d'un utilisateur
 */
function _kw_djambi_update_user_infos($user_data, $djuid, $join = FALSE) {
  $user_data['ip'] = $_SERVER['REMOTE_ADDR'];
  $user_data['ping'] = time();
  $unstored_keys = array('djuid', 'cookie', 'status', 'ranking', 'uid');
  foreach ($user_data as $key => $value) {
    if (in_array($key, $unstored_keys)) {
      unset($user_data[$key]);
    }
  }
  $record = array(
      'data' => $user_data,
      'djuid' => $djuid
  );
  if ($join) {
    global $user;
    $record['uid'] = $user->uid;
    $record['cookie'] = _kw_djambi_cookie();
  }
  drupal_write_record('djambi_users', $record, array('djuid'));
  return $user_data;
}

/**
 * Création du label d'une pièce
 * @param DjambiPiece $piece
 */
function _kw_djambi_get_full_piece_name(DjambiPiece $piece) {
  return t("!color !longname", array(
    "!color" => _kw_djambi_get_translatable_messages($piece->getFaction()->getName()),
    "!longname" => _kw_djambi_get_translatable_messages($piece->getLongname())
  ));
}

/**
 * Fixe le temps de conservation d'une partie
 * @param String $mode
 */
function _kw_djambi_autodelete_time($mode = 'std') {
  if ($mode == 'no_autodelete') {
    return 0;
  }
  if ($mode == 'extended') {
    return time() + 60 * 60 * 24 * 365;
  }
  else {
    return time() + 60 * 60 * 24;
  }
}

/**
 * Génère un message de description d'un mouvement à partir des données enregistrées
 *   dans la base.
 */
function _kw_djambi_describe_move($move, $grid) {
  $msg = NULL;
  $piece = $grid->getPieceById($move["target"]);
  if ($move["type"] == "move") {
    $faction = $grid->getFactionById($move["target_faction"]);
    $msg = t("!faction has moved !piece from !origin to !destination.", array(
        "!faction" => "<span class='faction " . $faction->getClass() . "'>" . $faction->getName("t") . "</span>",
        "!piece" =>  "<span class='piece " . $piece->getType() . "'>" . _kw_djambi_get_full_piece_name($piece) . "</span>",
        "!origin" => $move["from"],
        "!destination" => $move["to"]
    ));
  }
  elseif ($move["type"] == "murder") {
    $victim = $piece;
    $responsable = $grid->getPieceById($move["acting"]);
    $msg = t("!victim has been killed by !piece. The crime took place in !origin, and the victim body was found in !destination.", array(
        "!victim" => "<span class='piece " . $victim->getType() . "'>" . _kw_djambi_get_full_piece_name($victim) . "</span>",
        "!piece" =>  "<span class='piece " . $responsable->getType() . "'>" . _kw_djambi_get_full_piece_name($responsable) . "</span>",
        "!origin" => $move["from"],
        "!destination" => $move["to"]
    ));
  }
  elseif ($move["type"] == "necromobility") {
    $responsable = $grid->getPieceById($move["acting"]);
    $msg = t("!piece has exhumed a dead body from !origin. Its new burial place is located in !destination.", array(
        "!piece" =>  "<span class='piece " . $responsable->getType() . "'>" . _kw_djambi_get_full_piece_name($responsable) . "</span>",
        "!origin" => $move["from"],
        "!destination" => $move["to"]
    ));
  }
  elseif ($move["type"] == "manipulation") {
    $victim = $piece;
    $responsable = $grid->getPieceById($move["acting"]);
    $msg = t("!victim has been manipulated by !piece from !origin to !destination.", array(
        "!victim" => "<span class='piece " . $victim->getType() . "'>" . _kw_djambi_get_full_piece_name($victim) . "</span>",
        "!piece" =>  "<span class='piece " . $responsable->getType() . "'>" . _kw_djambi_get_full_piece_name($responsable) . "</span>",
        "!origin" => $move["from"],
        "!destination" => $move["to"]
    ));
  }
  elseif ($move['type'] == 'elimination') {
    $victim = $piece;
    $msg = t("!victim has been eliminated from the game. The action took place in !origin.", array(
        "!victim" => "<span class='piece " . $victim->getType() . "'>" . _kw_djambi_get_full_piece_name($victim) . "</span>",
        "!origin" => $move["from"],
    ));
  }
  return $msg;
}

/**
 * Génère un message de description des événements à partir des données
 *   enregistrées dans la base.
 */
function _kw_djambi_describe_event($event, DjambiBattlefield $grid) {
  $args = array();
  if (is_array($event["args"])) {
    foreach ($event["args"] as $key => $arg) {
      if (substr($key, 0, 2) == "!!") {
        $arg = _kw_djambi_get_translatable_messages($arg);
      }
      $args[$key] = $arg;
    }
  }
  return _kw_djambi_get_translatable_messages($event["event"], $args, $grid);
}

/**
 * Vérifie si la faction passée en argument est contrôlée par l'utilisateur courant.
 */
function _kw_djambi_check_current_user(DjambiPoliticalFaction $faction, $control = TRUE) {
  global $user;
  if ($control) {
    $user_data = $faction->getControl()->getUserData();
  }
  else {
    $user_data = $faction->getUserData();
  }
  if ($user->uid > 0) {
    if ($user_data['uid'] == $user->uid) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
  else {
    $cookie = _kw_djambi_cookie();
    if (!empty($cookie) && $user_data['cookie'] == $cookie) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
}

/**
 * Formulaire créant une grille de Djambi
*/
function kw_djambi_game_form($form, &$form_state, $node) {
  // Chargement de la grille
  if (!empty($form_state['kw_djambi']['selected_piece']) && !$form_state['kw_djambi']['change_turn']) {
    $piece = $form_state['kw_djambi']['selected_piece'];
    $grid = $piece->getFaction()->getBattlefield();
  }
  else {
    $grid = _kw_djambi_load_game($node);
    if (isset($form_state['kw_djambi']['change_turn'])) {
      unset($form_state['kw_djambi']);
    }
  }
  $form['#grid'] = $grid;
  // Mise à jour des informations utilisateur
  if (!$grid->isFinished() && $grid->getStatus() != KW_DJAMBI_MODE_SANDBOX) {
    $current_user_faction = NULL;
    $playable_factions = array();
    foreach ($grid->getFactions() as $faction) {
      if (_kw_djambi_check_current_user($faction, FALSE)) {
        $current_user_faction = $faction;
      }
      if ($faction->getStatus() != KW_DJAMBI_USER_VASSALIZED) {
        $playable_factions[] = $faction;
      }
    }
    if (!is_null($current_user_faction)) {
      $user_data = _kw_djambi_update_user_infos($current_user_faction->getUserData(),
          $current_user_faction->getUserDataItem('djuid'));
      $current_user_faction->updateUserData($user_data);
    }
  }
  // Inclusion du Javascript et du CSS
  if ($grid->isPending()) {
    drupal_add_library('system', 'ui.core');
    drupal_add_library('system', 'ui.widget');
    drupal_add_library('system', 'ui.mouse');
    drupal_add_library('system', 'ui.draggable');
    drupal_add_library('system', 'ui.droppable');
  }
  $form['#attached']['css'][] = drupal_get_path('module', 'kw_djambi').'/kw_djambi.css';
  $form['#attached']['js'][] = drupal_get_path('module', 'kw_djambi').'/js/kw_djambi.js';
  $ajax_settings = array(
      'callback' => 'kw_djambi_ajax_callback',
      'wrapper' => 'DjambiContainer' . $grid->getId(),
      'effect' => 'none',
      'method' => 'replace',
  );
  // Création de l'ossature du formulaire
  if (!$grid->isNotBegin()) {
    $form['#theme'] = 'djambi_grid';
  }
  else {
    $form['#theme'] = 'djambi_recruiting_phase';
  }
  $refresh = 'no';
  $form['grid'] = array(
      '#type' => 'fieldset',
      '#title' => t('Djambi grid #!number', array('!number' => $grid->getInfo('sequence'))),
      '#weight' => 0,
  );
  if (!$grid->isFinished()) {
    $form['grid']['controls'] = array(
        '#type' => 'container',
        '#attributes' => array('class' => array('controls')),
        '#weight' => 10
    );
    if ($grid->getStatus() != KW_DJAMBI_MODE_FRIENDLY || !is_null($current_user_faction)) {
      $refresh = 'yes';
      $form['grid']['controls']['resfresh'] = array(
          '#type' => 'submit',
          '#attributes' => array('class' => array('refresh-button')),
          '#value' => t('Refresh'),
          '#ajax' => $ajax_settings,
          '#weight' => 99,
          '#submit' => array('kw_djambi_game_form_refresh_submit')
      );
    }
  }
  $form['#prefix'] = '<div id="DjambiContainer' . $grid->getId() . '" class="djambi" '
  . 'data-grid="' . $grid->getId() . '" data-version="' . $grid->getInfo('changed') . '" '
  . 'data-refresh="' . $refresh . '" data-turn="' . $grid->getCurrentTurnId() . '">';
  $form['#suffix'] = '</div>';
  $form['options'] = array(
      '#type' => 'fieldset',
      '#title' => t('Game configuration'),
      '#weight' => 4,
      '#collapsible' => TRUE,
      '#collapsed' => $grid->isNotBegin() ? FALSE : TRUE,
  );
  if (!$grid->isNotBegin()) {
    $form['stats'] = array(
        '#type' => 'fieldset',
        '#title' => $grid->getStatus() == KW_DJAMBI_STATUS_FINISHED ? t('Stats and awards') : t('Stats'),
        '#weight' => 5
    );
  }
  $form['log'] = array(
      '#type' => 'fieldset',
      '#title' => t('Treachery log'),
      '#weight' => 10,
      '#collapsible' => !$grid->isPending(),
      '#collapsed' => !$grid->isNotBegin()
  );
  // Recrutement des joueurs...
  if ($grid->isNotBegin()) {
    $form['grid']['factions'] = array(
        '#type' => 'container'
    );
    foreach ($playable_factions as $faction) {
      $form['grid']['factions'][$faction->getId()]['label'] = array(
          '#type' => 'item',
          '#title' => '<span class="faction ' . $faction->getClass() . '">' . $faction->getName() . '</span>',
          '#markup' => $faction->getStatus() == KW_DJAMBI_USER_EMPTY_SLOT ?
          t('Empty') : theme('username', array('account' => user_load($faction->getUserDataItem('uid'))))
      );
      if ($faction->getStatus() != KW_DJAMBI_USER_EMPTY_SLOT) {
        $form['grid']['factions'][$faction->getId()]['infos'] = array(
            '#type' => 'value',
            '#value' => array(
                'ip' => $faction->getUserDataItem('ip'),
                'ping' => $faction->getUserDataItem('ping'),
                'joined' => $faction->getUserDataItem('joined'),
                'djuid' => $faction->getUserDataItem('djuid'),
                'me' => !is_null($current_user_faction) && $current_user_faction->getId() == $faction->getId() ? TRUE : FALSE
            )
        );
      }
      if (!is_null($current_user_faction) && $faction->getId() == $current_user_faction->getId()) {
        $form['grid']['factions'][$faction->getId()]['action'] = array(
            '#type' => 'submit',
            '#value' => t('Leave game'),
            '#submit' => array('kw_djambi_game_form_cancel_participation_submit'),
        );
      }
      elseif ($faction->getStatus() == KW_DJAMBI_USER_EMPTY_SLOT) {
        $form['grid']['factions'][$faction->getId()]['action'] = array(
            '#type' => 'submit',
            '#value' => !is_null($current_user_faction) ? t('Play this side') : t('Join this game'),
            '#submit' => array('kw_djambi_game_form_participate_submit'),
            '#name' => 'use-' . $faction->getId(),
            '#ajax' => $ajax_settings
        );
      }
    }
  }
  // Ajout des interactions concernant le joueur actif
  $phase_text = NULL;
  $faction = $grid->getPlayingFaction();
  // Contrôle de l'affichage des derniers mouvements
  $current_turn_id = $grid->getCurrentTurnId();
  $show_moves = array('show' => FALSE);
  if ($grid->isPending()) {
    $turns = $grid->getTurns();
    if (!empty($form_state['show_turn_move'])) {
      $show_moves = array(
          'show' => TRUE,
          'type' => 'turn-based',
          'turn' => $form_state['show_turn_move']
      );
    }
    elseif (!empty($form_state['time_based_moves']) && empty($form_state['do_not_show_moves'])) {
      foreach($turns as $key => $turn) {
        $last_turn = $key;
        if ($turn['begin'] > $form_state['time_based_moves']) {
          break;
        }
      }
      $show_moves = array(
          'show' => TRUE,
          'type' => 'time-based',
          'turn' => $current_turn_id - $last_turn
      );
      unset($form_state['time_based_moves']);
    }
    elseif (empty($form_state['do_not_show_moves']) && !_kw_djambi_check_current_user($faction)) {
      $show_moves = array(
          'show' => TRUE,
          'type' => 'turn-based',
          'turn' =>  1
      );
    }
    $current_value = $show_moves['show'] ? $show_moves['turn'] : 0;
    $prev_turn = isset($turns[$current_turn_id - ($current_value + 1)]) ? $current_value + 1 : NULL;
    $show_moves['prev'] = $prev_turn;
    if (!empty($show_moves) && $show_moves['show'] && $show_moves['type'] != 'time-based') {
      $next_turn = isset($turns[$current_turn_id - ($current_value - 1)]) && !empty($turns[$current_turn_id - ($current_value - 1)]['end']) ? $current_value - 1 : NULL;
      $show_moves['next'] = $next_turn;
    }
    else {
      $next_turn = NULL;
    }
    if (!is_null($prev_turn)) {
      $form['grid']['controls']['show_prev_move_button'] = array(
          '#type' => 'submit',
          '#value' => $current_value == 0 ? t('Show previous move') : t('Show more moves'),
          '#limit_validation_errors' => array(),
          '#submit' => array('kw_djambi_game_form_show_prev_move_submit'),
          '#ajax' => $ajax_settings
      );
    }
    if (!is_null($next_turn)) {
      $form['grid']['controls']['show_last_move_button'] = array(
          '#type' => 'submit',
          '#value' => t('Show less moves'),
          '#limit_validation_errors' => array(),
          '#submit' => array('kw_djambi_game_form_show_next_move_submit'),
          '#ajax' => $ajax_settings
      );
    }
    if ($show_moves['show']) {
      $form['grid']['controls']['hide_moves_button'] = array(
          '#type' => 'submit',
          '#value' => t('Hide moves'),
          '#limit_validation_errors' => array(),
          '#submit' => array('kw_djambi_game_form_hide_moves_submit'),
          '#ajax' => $ajax_settings
      );
    }
  }
  $form['show_moves'] = array(
      '#type' => 'value',
      '#value' => $show_moves
  );
  // Affichage du récapitulatif des règles
  $options = DjambiBattlefield::getOptionsInfo();
  $rules_rows = array();
  $nb_rule = $nb_option = 1;
  foreach ($options as $key => $option) {
    if ($option['type'] == 'rule_variant' || $option['type'] == 'game_option') {
      $value = $grid->getOption($key);
      if (!empty($option['choices'][$value])) {
        if ($option['type'] == 'rule_variant') {
          $title = t('Rule variant #!number', array('!number' => str_pad($nb_rule++, 2, '0', STR_PAD_LEFT)));
        }
        elseif ($option['type'] == 'game_option') {
          $title = t('Game option #!number', array('!number' => str_pad($nb_option++, 2, '0', STR_PAD_LEFT)));
        }
        else {
          $title = $option['type'];
        }
        $rules_rows[] = array(
            array('class' => array(str_replace(array('_', ' '), '-', $option['type'])), 'data' => $title),
            array('class' => array('label'), 'data' => !empty($option['title']) ? _kw_djambi_get_translatable_messages($option['title']) : NULL),
            array('data' => _kw_djambi_get_translatable_messages($option['choices'][$value], array('!value' => $value)))
        );
      }
    }
  }
  if (!empty($rules_rows)) {
    $rules_header = array(
        array('data' => 'Type'),
        array('data' => 'Label'),
        array('data' => 'Value')
    );
    $form['options']['table'] = array('#markup' => theme('table', array('rows' => $rules_rows, 'header' => $rules_header)));
  }
  // Interface de réponse sur proposition de partie nulle
  if ($faction && $grid->getStatus() == KW_DJAMBI_STATUS_DRAW_PROPOSAL) {
    $form['actions'] = array(
        '#type' => 'fieldset',
        '#title' => t('Actions'),
        '#weight' => 1
    );
    $factions = $grid->getFactions();
    foreach ($factions as $side) {
      if ($side->getDrawStatus() == 1) {
        $peacemonger = $side;
        break;
      }
    }
    if (_kw_djambi_check_current_user($faction)) {
      $form['actions']['descriptions'] = array(
          '#type' => 'item',
          '#title' => t('Now playing') . ' : ',
          '#prefix' => '<div class="container-inline">',
          '#suffix' => '</div>',
          '#markup' => t('!faction side', array('!faction' =>
              "<span class='faction " . $faction->getClass() . "'>"
              . $faction->getName("t") . "</span>")),
          '#weight' => -10,
      );
      $form['actions']['explain'] = array(
          '#type' => 'markup',
          '#markup' => t("A peace proposal has been made by !faction side. What is your answer ?",
              array('!faction' => "<span class='faction " . $peacemonger->getClass() . "'>"
                  . $peacemonger->getName("t") . "</span>"))
      );
      $form['actions']['accept_peace'] = array(
          '#type' => 'submit',
          '#value' => t("OK, end this game with a draw and stay good friends."),
          '#submit' => array('kw_djambi_game_form_accept_peace_submit'),
          '#ajax' => $ajax_settings
      );
      $form['actions']['reject_peace'] = array(
          '#type' => 'submit',
          '#value' => t("No way, I am sure to win this game."),
          '#submit' => array('kw_djambi_game_form_reject_peace_submit'),
          '#ajax' => $ajax_settings
      );
    }
    else {
      $form['actions']['explain'] = array(
          '#type' => 'markup',
          '#markup' => t("A peace proposal has been made by !faction side. Waiting for !current side answer...",
              array('!faction' => $peacemonger->getName(), '!current' => $faction->getName()))
      );
    }
  }
  elseif ($faction && $grid->getStatus() == KW_DJAMBI_STATUS_PENDING &&
      _kw_djambi_check_current_user($faction)) {
    $actions = array();
    $descriptions = array();
    // Annulation de sélection d'une pièce
    if (!empty($form_state["kw_djambi"]) && in_array($form_state["kw_djambi"]["phase"], array('move_interactions', 'piece_destination'))) {
      $actions['cancel_selection'] = array(
          '#type' => 'submit',
          '#value' => t('Cancel piece selection'),
          '#submit' => array('kw_djambi_game_form_cancel_selection_submit'),
          '#ajax' => $ajax_settings
      );
    }
    // Annulation d'un mouvement
    elseif ($grid->getMode() == KW_DJAMBI_MODE_SANDBOX && count($grid->getTurns()) > 1) {
      $actions['cancel_last_turn'] = array(
          '#type' => 'submit',
          '#value' => t('Cancel last move'),
          '#submit' => array('kw_djambi_game_form_cancel_last_turn_submit'),
          '#ajax' => $ajax_settings
      );
    }
    // Passer son tour
    $allowed_skip_turns = $grid->getOption('allowed_skipped_turns_per_user');
    if ($allowed_skip_turns == -1 || $allowed_skip_turns > $faction->getSkippedTurns()) {
      if (empty($form_state['kw_djambi']['selected_piece'])) {
        $actions['skip_turn'] = array(
            '#type' => 'submit',
            '#value' => $allowed_skip_turns == -1 ? t('Skip turn') : t('Skip turn (!nb of !max already skipped)', array(
                '!nb' => $faction->getSkippedTurns(), '!max' => $allowed_skip_turns)),
            '#submit' => array('kw_djambi_game_form_skip_turn_submit'),
            '#ajax' => $ajax_settings
        );
      }
      if ($allowed_skip_turns == -1) {
        $descriptions[] = t('There is no limitation concerning turn skippings.');
      }
      else {
        $descriptions[] = format_plural($allowed_skip_turns, t('You can only skip your turn 1 time.'),
            'You can skip your turn only !nb times', array('!nb' => $allowed_skip_turns));
      }
    }
    // Proposer une nulle
    $draw_proposal_delay = $grid->getOption('turns_before_draw_proposal');
    $turns = $grid->getTurns();
    if ($draw_proposal_delay != -1 && $faction->getLastDrawProposal() + $draw_proposal_delay <= $turns[$grid->getCurrentTurnId()]['turn']) {
      $actions['draw_proposal'] = array(
          '#type' => 'submit',
          '#value' => t('Ask for a draw'),
          '#submit' => array('kw_djambi_game_form_draw_proposal_submit'),
          '#ajax' => $ajax_settings
      );
      if ($draw_proposal_delay > 1) {
        $descriptions[] = t('You can ask for a draw every !nb turns', array('!nb' => $draw_proposal_delay));
      }
      $descriptions[] = t('Asking for a draw will end your turn without making a piece move.');
    }
    elseif ($draw_proposal_delay == -1) {
      $descriptions[] = t('No mercy game : draw proposals are forbidden.');
    }
    else {
      $descriptions[] = t('You cannot ask for a draw before turn !turn.',
          array('!turn' => ($faction->getLastDrawProposal() + $draw_proposal_delay)));
    }
    // Abandonner
    $actions['withdrawal'] = array(
        '#type' => 'submit',
        '#value' => t('Withdraw'),
        '#submit' => array('kw_djambi_game_form_withdraw_submit'),
        '#ajax' => $ajax_settings
    );
    // Retour après abandon
    if ($grid->getOption('rule_comeback') == 'allowed' && $grid->getMode() == KW_DJAMBI_MODE_SANDBOX) {
      foreach ($grid->getFactions() as $playing_faction) {
        if ($playing_faction->canComeBackAfterWithdraw()) {
          $actions['comeback']['comeback_' . $playing_faction->getId()] = array(
              '#type' => 'submit',
              '#value' => t('Allow !faction side to come back in the game', array(
                  '!faction' => $playing_faction->getName())),
              '#submit' => array('kw_djambi_game_form_comeback_submit'),
              '#ajax' => $ajax_settings,
              '#weight' => 10
          );
        }
      }
      if (isset($actions['comeback'])) {
        $actions['comeback']['separator'] = array(
            '#markup' => '<hr />'
        );
      }
    }
    // Regroupement des actions dans un fieldset
    if (!empty($actions) || !empty($descriptions)) {
      $form['actions'] = array(
          '#type' => 'fieldset',
          '#title' => t('Actions'),
          '#weight' => 1
      );
      foreach ($actions as $key => $value) {
        $form['actions'][$key] = $value;
      }
      if (!empty($descriptions)) {
        $form['actions']['descriptions'] = array(
            '#type' => 'item',
            '#title' => t('Now playing') . ' : ',
            '#prefix' => '<div class="container-inline">',
            '#suffix' => '</div>',
            '#markup' => t('!faction side', array('!faction' =>
                "<span class='faction " . $faction->getClass() . "'>"
                . $faction->getName("t") . "</span>")),
            '#weight' => -10,
            '#description' => theme('item_list', array('items' => $descriptions))
        );
      }
    }
    // Par défaut : phase de sélection des pièces
    if (!isset($form_state['kw_djambi'])) {
      $form_state['kw_djambi'] = array(
          'phase' => 'piece_selection'
      );
    }
    // Sélection des pièces
    $is_current_user = _kw_djambi_check_current_user($faction);
    if ($is_current_user) {
      $piece_selection_phases = array('piece_selection', 'piece_destination');
      if ($is_current_user && in_array($form_state['kw_djambi']['phase'], $piece_selection_phases)) {
        /* @var $piece DjambiPiece */
        foreach($faction->getControlledPieces() as $key => $piece) {
          if ($piece->isMovable()) {
            $form['pieces']['movable'][$piece->getId()] = array(
                '#type' => 'image_button',
                '#return_value' => $piece->getId(),
                '#src' => $piece->getImage(),
                '#attributes' => array('alt' => t('Move !piece', array('!piece' => $piece->getShortname('t')))),
                '#ajax' => $ajax_settings
            );
          }
        }
        $form['piece_destination'] = array(
            '#type' => 'hidden',
            '#value' => ''
        );
      }
      // Destination des pièces
      if ($form_state['kw_djambi']['phase'] == 'piece_destination') {
        /* @var $selected_piece DjambiPiece */
        $selected_piece = $form_state['kw_djambi']['selected_piece'];
        $form['pieces']['destination']['#selected_piece_id'] = $selected_piece->getId();
        $reachable_cells = $selected_piece->getAllowableMoves();
        foreach ($reachable_cells as $key => $cell_key) {
          $alt_text = t('Move the !piece here (!case).', array(
              '!piece' => _kw_djambi_get_full_piece_name($selected_piece), '!case' => $cell_key
          ));
          $form['pieces']['destination']['cell-' . $cell_key] = array(
              '#type' => 'image_button',
              '#return_value' => $cell_key,
              '#src' => base_path() . drupal_get_path('module', 'kw_djambi') . '/img/apply.png',
              '#attributes' => array('alt' => $alt_text, 'title' => $alt_text),
              '#ajax' => $ajax_settings
          );
        }
        $form["pieces"]["movable"][$selected_piece->getId()]["#attributes"]["class"][] = "selected";
        $phase_text = t("The !piece is selected. Choose now its destination case, or select another piece to move.",
            array("!piece" => "<span class='piece " . $selected_piece->getType() . "'>" . _kw_djambi_get_full_piece_name($selected_piece) . "</span>")
        );
      }
      // Résultat du déplacement
      elseif ($form_state['kw_djambi']['phase'] == 'move_interactions') {
        $current_interaction = current($form_state['kw_djambi']['interactions']);
        $selected_piece = $form_state['kw_djambi']['selected_piece'];
        // Cas 1 : placement d'une pièce tuée
        if ($current_interaction['type'] == 'murder') {
          $form['pieces']['murder']['#selected_piece_id'] = $selected_piece->getId();
          $victim_piece = $current_interaction['target'];
          $free_cells = $grid->getFreeCells($victim_piece, FALSE, TRUE);
          foreach ($free_cells as $cell) {
            $alt_text = t('Bury !piece in !case', array(
                '!piece' => _kw_djambi_get_full_piece_name($victim_piece), '!case' => $cell
            ));
            $form['pieces']['murder']['cell-' . $cell] = array(
                '#type' => 'image_button',
                '#return_value' => $cell,
                '#src' => base_path() . drupal_get_path('module', 'kw_djambi') . '/img/flag_black.png',
                '#attributes' => array('alt' => $alt_text, 'title' => $alt_text),
                '#ajax' => $ajax_settings
            );
          }
          $phase_text = t('Your !piece has killed the !victim, select now the case where you victim will rest in peace.',
              array(
                  '!piece' => '<span class="piece ' . $selected_piece->getType() . '">' . _kw_djambi_get_full_piece_name($selected_piece) . '</span>',
                  '!victim' => '<span class="piece ' . $victim_piece->getType() . '">' . _kw_djambi_get_full_piece_name($victim_piece) . '</span>'
              ));
        }
        // Cas 2 : placement d'une pièce tuée déplacée
        elseif ($current_interaction["type"] == "necromobility") {
          $form["pieces"]["necromobility"]["#selected_piece_id"] = $selected_piece->getId();
          $victim_piece = $current_interaction["target"];
          $free_cells = $grid->getFreeCells($victim_piece);
          foreach ($free_cells as $cell) {
            $alt_text = t("Move the dead piece to case !case.", array("!case" => $cell));
            $form["pieces"]["necromobility"]["cell-" . $cell] = array(
                "#type" => "image_button",
                "#return_value" => $cell,
                "#src" => base_path() . drupal_get_path("module", "kw_djambi") . "/img/flag_black.png",
                "#attributes" => array("alt" => $alt_text, "title" => $alt_text),
                '#ajax' => $ajax_settings
            );
          }
          $phase_text = t("Your !piece has exhumed an old dead piece, select now its new burial place.", array(
              "!piece" => "<span class='piece " . $selected_piece->getType() . "'>" . _kw_djambi_get_full_piece_name($selected_piece) . "</span>"
          ));
        }
        // Cas 3 : placement d'une pièce manipulée
        elseif ($current_interaction["type"] == "manipulation") {
          $form["pieces"]["manipulation"]["#selected_piece_id"] = $selected_piece->getId();
          $manipulated_piece = $current_interaction["target"];
          $free_cells = $grid->getFreeCells($manipulated_piece);
          foreach ($free_cells as $cell) {
            $alt_text = t("Move manipulated !piece to !case", array(
                "!piece" => _kw_djambi_get_full_piece_name($manipulated_piece), "!case" => $cell
            ));
            $form["pieces"]["manipulation"]["cell-" . $cell] = array(
                "#type" => "image_button",
                "#return_value" => $cell,
                "#src" => base_path() . drupal_get_path("module", "kw_djambi") . "/img/note2.png",
                "#attributes" => array("alt" => $alt_text, "title" => $alt_text),
                '#ajax' => $ajax_settings
            );
          }
          $phase_text = t("Your !diplomat is manipulating the !piece, select now the destination case for your subjucated victim.",
              array(
                  "!diplomat" => "<span class='piece " . $selected_piece->getType() . "'>" . _kw_djambi_get_full_piece_name($selected_piece) . "</span>",
                  "!piece" => "<span class='piece " . $manipulated_piece->getType() . "'>" . _kw_djambi_get_full_piece_name($manipulated_piece) . "</span>"
              ));
        }
        // Cas 4 : sélection de la victime d'un reportage
        elseif ($current_interaction["type"] == "reportage") {
          $form["pieces"]["reportage"]["#selected_piece_id"] = $selected_piece->getId();
          foreach ($current_interaction["victims"] as $victim) {
            $position = DjambiBattlefield::locateCell($victim->getPosition());
            $alt_text = t("Lauch an inquiry on !piece", array(
                "!piece" => _kw_djambi_get_full_piece_name($victim)
            ));
            $form["pieces"]["reportage"]["cell-" . $position] = array(
                "#type" => "image_button",
                "#return_value" => $position,
                "#src" => base_path() . drupal_get_path("module", "kw_djambi") . "/img/flag_black.png",
                "#attributes" => array("alt" => $alt_text, "title" => $alt_text),
                '#ajax' => $ajax_settings
            );
          }
          $phase_text = t("Your !reporter has to choose beetween several victims...",
              array("!reporter" => "<span class='piece " . $selected_piece->getType() . "'>" . _kw_djambi_get_full_piece_name($selected_piece) . "</span>"));
        }
        // Cas 5 : évacuation du trône
        elseif ($current_interaction["type"] == "throne_evacuation") {
          $form["pieces"]["throne_evacuation"]["#selected_piece_id"] = $selected_piece->getId();
          $selected_piece->buildAllowableMoves(FALSE);
          foreach ($selected_piece->getAllowableMoves() as $key => $position) {
            $alt_text = t("Move your !piece to !case", array(
                "!piece" => _kw_djambi_get_full_piece_name($selected_piece),
                "!case" => $position
            ));
            $form["pieces"]["throne_evacuation"]["cell-" . $position] = array(
                "#type" => "image_button",
                "#return_value" => $position,
                "#src" => base_path() . drupal_get_path("module", "kw_djambi") . "/img/apply.png",
                "#attributes" => array("alt" => $alt_text, "title" => $alt_text),
                '#ajax' => $ajax_settings
            );
          }
          $phase_text = t("Your !piece is not allowed to stay here. Run away !",
              array("!piece" => "<span class='piece " . $selected_piece->getType() . "'>" . _kw_djambi_get_full_piece_name($selected_piece) . "</span>"));
        }
      }
      // Attente du mouvement...
      elseif ($form_state["kw_djambi"]["phase"] == "piece_selection") {
        $phase_text = t("It's your turn. Select a movable piece in the grid...");
      }
    }
  }
  // Affichage de la phase en cours de la partie
  if (!is_null($phase_text)) {
    $form["textes"]["phase"] = array(
        "#type" => "markup",
        "#markup" => $phase_text
    );
  }
  // Log des événements
  if (!empty($form['log'])) {
    $default_value = 20;
    $nb_current_msg = !isset($form_state['kw_logs']['end']) ? $default_value : $form_state['kw_logs']['end'];
    $log = _kw_djambi_build_log($grid);
    $nb_total_msg = count($log['msg']);
    $ajax_log_settings = array(
        'callback' => 'kw_djambi_ajax_log_callback',
        'wrapper' => 'GridLog' . $grid->getId(),
        'effect' => 'fade',
        'method' => 'replace',
    );
    if ($nb_current_msg == -1) {
      $nb_current_msg = $nb_total_msg;
      $offset_length = $nb_total_msg;
    }
    else {
      $offset_length = $default_value;
    }
    $msg = array_slice($log['msg'], isset($form_state['kw_logs']['begin']) ? $form_state['kw_logs']['begin'] : 0, $offset_length, TRUE);
    $form['log']['container'] = array(
        'history' => array(
            '#markup' => theme('item_list', array('items' => $msg))),
        'more' => array(
            '#type' => 'container',
            '#attributes' => array('id' => 'GridLog' . $grid->getId())
        )
    );
    if ($nb_total_msg > ($nb_current_msg + 20)) {
      $form['log']['container']['more']['load_more_logs'] = array(
          '#type' => 'submit',
          '#value' => t('Load 20 older logs'),
          '#submit' => array('kw_djambi_load_more_logs'),
          '#ajax' => $ajax_log_settings
      );
    }
    if ($nb_total_msg > $nb_current_msg) {
      $form['log']['container']['more']['load_all_logs'] = array(
          '#type' => 'submit',
          '#value' => t('Load all logs'),
          '#submit' => array('kw_djambi_load_all_logs'),
          '#ajax' => $ajax_log_settings
      );
    }
  }
  // Afichage des stats
  if (!empty($form['stats'])) {
    $stats = _kw_djambi_build_stats($grid);
    $form['stats']['items'] = array(
        '#markup' => theme('item_list', array('items' => $stats, 'attributes' => array('class' => array('stats'))))
    );
  }
  // Redirection
  $form["#action"] = "#DjambiGrid" . $grid->getId();
  return $form;
}

/**
 * Soumission de formulaire : chargement de logs supplémentaires
 */
function kw_djambi_load_more_logs($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  if (!isset($form_state['kw_logs']) || $form_state['kw_logs']['end'] == -1) {
    $form_state['kw_logs']['end'] = 20;
  }
  $form_state['kw_logs']['begin'] = $form_state['kw_logs']['end'];
  $form_state['kw_logs']['end'] += 20;
}

/**
 * Soumission de formulaire : chargement de tous les logs
 */
function kw_djambi_load_all_logs($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $form_state['kw_logs']['begin'] = isset($form_state['kw_logs']['end']) ? $form_state['kw_logs']['end'] : 20;
  $form_state['kw_logs']['end'] = -1;
}

/**
 * Fonction appelée après une requête Ajax : regénération du formulaire de jeu
 */
function kw_djambi_ajax_callback($form, $form_state) {
  return $form;
}

/**
 * Fonction appelée après une requête Ajax : chargement des logs
 */
function kw_djambi_ajax_log_callback($form, $form_state) {
  return $form['log']['container'];
}

/**
 * Validation des actions sur la grille de jeu
 */
function kw_djambi_game_form_validate($form, &$form_state) {
  /* @var $grid DjambiBattlefield */
  $grid = $form["#grid"];
  $errors = array();
  $button = $form_state["triggering_element"];
  $type_button = isset($button["#array_parents"][1]) ? $button["#array_parents"][1] : NULL;
  module_load_include('inc', 'kw_djambi', 'kw_djambi.validations');
  if ($type_button == "movable") {
    $piece = kw_djambi_piece_selection_validate($errors, $button["#return_value"], $grid);
    if ($piece && isset($form_state["kw_djambi"]["selected_piece"])) {
      $selected_piece = $form_state["kw_djambi"]["selected_piece"];
      if ($piece->getId() == $selected_piece->getId()) {
        $piece = FALSE;
        unset($form_state["kw_djambi"]["selected_piece"]);
        $form_state["kw_djambi"]["phase"] = "piece_selection";
      }
    }
    if ($piece) {
      $form_state["kw_djambi"]["phase"] = "piece_destination";
      $form_state["kw_djambi"]["selected_piece"] = $piece;
      if (!empty($form_state["input"]["piece_destination"])) {
        $destination = kw_djambi_piece_destination_validate($errors, $piece, $form_state["input"]["piece_destination"], NULL);
        if ($destination) {
          $form_state["kw_djambi"]["phase"] = "move_result";
          $form_state["kw_djambi"]["selected_destination"] = $form_state["input"]["piece_destination"];
        }
      }
    }
  }
  elseif ($type_button == "destination" && isset($form_state["kw_djambi"]["selected_piece"])) {
    $piece = $form_state["kw_djambi"]["selected_piece"];
    $destination = kw_djambi_piece_destination_validate($errors, $piece, $button["#return_value"], $button["#name"]);
    if ($destination) {
      $form_state["kw_djambi"]["phase"] = "move_result";
      $form_state["kw_djambi"]["selected_destination"] = $button["#return_value"];
    }
  }
  elseif (isset($form_state["kw_djambi"]["interactions"])) {
    $current_interaction = current($form_state["kw_djambi"]["interactions"]);
    $selected_piece = $form_state["kw_djambi"]["selected_piece"];
    if ($current_interaction["type"] == "murder" && $type_button == $current_interaction["type"]) {
      $victim_piece = $current_interaction["target"];
      $death = kw_djambi_piece_murder_validate($errors, $grid, $selected_piece, $victim_piece, $button["#return_value"], $button["#name"]);
      if ($death) {
        $form_state["kw_djambi"]["phase"] = "interaction_result";
        $form_state["kw_djambi"]["selected_interaction"] = $button["#return_value"];
      }
    }
    elseif ($current_interaction["type"] == "necromobility" && $type_button == $current_interaction["type"]) {
      $manipulated_piece = $current_interaction["target"];
      $manipulation = kw_djambi_piece_necromobility_validate($errors, $grid, $manipulated_piece, $button["#return_value"], $button["#name"]);
      if ($manipulation) {
        $form_state["kw_djambi"]["phase"] = "interaction_result";
        $form_state["kw_djambi"]["selected_interaction"] = $button["#return_value"];
      }
    }
    elseif ($current_interaction["type"] == "manipulation" && $type_button == $current_interaction["type"]) {
      $manipulated_piece = $current_interaction["target"];
      $manipulation = kw_djambi_piece_manipulation_validate($errors, $grid, $selected_piece, $manipulated_piece, $button["#return_value"], $button["#name"]);
      if ($manipulation) {
        $form_state["kw_djambi"]["phase"] = "interaction_result";
        $form_state["kw_djambi"]["selected_interaction"] = $button["#return_value"];
      }
    }
    elseif ($current_interaction["type"] == "reportage" && $type_button == $current_interaction["type"]) {
      $reporter = $form_state["kw_djambi"]["selected_piece"];
      $reportage = kw_djambi_piece_reportage_validate($errors, $grid, $reporter, $button["#return_value"], $button["#name"]);
      if ($reportage) {
        $form_state["kw_djambi"]["phase"] = "interaction_result";
        $form_state["kw_djambi"]["selected_interaction"] = $button["#return_value"];
      }
    }
    elseif ($current_interaction["type"] == "throne_evacuation" && $type_button == $current_interaction["type"]) {
      $evacuation = kw_djambi_piece_evacuation_validate($errors, $grid, $selected_piece, $button["#return_value"], $button["#name"]);
      if ($evacuation) {
        $form_state["kw_djambi"]["phase"] = "interaction_result";
        $form_state["kw_djambi"]["selected_interaction"] = $button["#return_value"];
      }
    }
  }
  if (!empty($errors)) {
    foreach ($errors as $error) {
      form_set_error($error["location"], $error["msg"]);
    }
  }
}

/**
 * Soumission du formulaire de jeu
 */
function kw_djambi_game_form_submit($form, &$form_state) {
  $change_turn = FALSE;
  $grid = $form['#grid'];
  $form_state['rebuild'] = TRUE;
  switch ($form_state['kw_djambi']['phase']) {
    case('interaction_result') :
      $interaction = current($form_state['kw_djambi']['interactions']);
      $piece = $form_state['kw_djambi']['selected_piece'];
      if ($interaction['type'] == 'murder') {
        $victim_piece = $interaction['target'];
        $piece->kill($victim_piece, $form_state['kw_djambi']['selected_interaction']);
        $grid = $piece->getFaction()->getBattlefield();
      }
      elseif ($interaction['type'] == 'necromobility') {
        $victim_piece = $interaction['target'];
        $piece->necromove($victim_piece, $form_state['kw_djambi']['selected_interaction']);
        $grid = $piece->getFaction()->getBattlefield();
      }
      elseif ($interaction['type'] == 'manipulation') {
        $manipulated_piece = $interaction['target'];
        $piece->manipulate($manipulated_piece, $form_state['kw_djambi']['selected_interaction']);
        $grid = $piece->getFaction()->getBattlefield();
      }
      elseif ($interaction['type'] == 'reportage') {
        $grid = $piece->getFaction()->getBattlefield();
        $cells = $grid->getCells();
        $victim = $cells[$form_state['kw_djambi']['selected_interaction']]['occupant'];
        $piece->kill($victim, $form_state['kw_djambi']['selected_interaction']);
        $grid = $piece->getFaction()->getBattlefield();
      }
      elseif ($interaction['type'] == 'throne_evacuation') {
        $piece->move($form_state['kw_djambi']['selected_interaction'], FALSE);
        $grid = $piece->getFaction()->getBattlefield();
      }
      $interaction_key = key($form_state['kw_djambi']['interactions']);
      unset($form_state['kw_djambi']['interactions'][$interaction_key]);
      unset($form_state['kw_djambi']['selected_interaction']);
      if (empty($form_state['kw_djambi']['interactions'])) {
        $change_turn = TRUE;
      }
      else {
        $form_state['kw_djambi']['phase'] = 'move_interactions';
      }
      break;
    case('move_result') :
      /* @var $piece DjambiPiece */
      $piece = $form_state['kw_djambi']['selected_piece'];
      $move_results = $piece->move($form_state['kw_djambi']['selected_destination']);
      $grid = $piece->getFaction()->getBattlefield();
      $form_state['kw_djambi']['selected_piece'] = $piece;
      if (!empty($move_results)) {
        $form_state['kw_djambi']['phase'] = 'move_interactions';
        $form_state['kw_djambi']['interactions'] = $move_results;
      }
      else {
        $change_turn = TRUE;
      }
      break;
  }
  if ($change_turn) {
    /* @var $grid DjambiBattlefield */
    $grid->changeTurn();
    _kw_djambi_save_game($grid);
  }
  $form_state['kw_djambi']['change_turn'] = $change_turn;
}

/**
 * Soumission de formulaire : annulation de la sélection d'une pièce
 */
function kw_djambi_game_form_cancel_selection_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  if (isset($form_state['kw_djambi'])) {
    unset($form_state['kw_djambi']);
  }
}

/**
 * Soumission du bouton d'annulation du dernier tour du jeu
 */
function kw_djambi_game_form_cancel_last_turn_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $form_state['kw_djambi']['change_turn'] = TRUE;
  $grid = $form['#grid'];
  $grid->cancelLastTurn();
  _kw_djambi_save_game($grid);
}

/**
 * Soumission du bouton "passer son tour"
 */
function kw_djambi_game_form_skip_turn_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $grid = $form['#grid'];
  $faction = $grid->getPlayingFaction();
  $faction->skipTurn();
  $grid = $faction->getBattlefield();
  _kw_djambi_save_game($grid);
}

/**
 * Soumission du bouton "Abandonner la partie"
 */
function kw_djambi_game_form_withdraw_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $grid = $form['#grid'];
  $faction = $grid->getPlayingFaction();
  $faction->withdraw();
  $grid = $faction->getBattlefield();
  $grid->changeTurn();
  _kw_djambi_save_game($grid);
}

/**
 * Soumission du bouton "Revenir dans la partie"
 */
function kw_djambi_game_form_comeback_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $grid = $form['#grid'];
  $clicked_button = $form_state['clicked_button']['#parents'][0];
  $id = substr($clicked_button, strpos($clicked_button, '_') + 1);
  $faction = $grid->getFactionById($id);
  $faction->comeBackAfterWithdraw();
  $grid = $faction->getBattlefield();
  _kw_djambi_save_game($grid);
}

/**
 * Soumission du bouton "Proposer une partie nulle"
 */
function kw_djambi_game_form_draw_proposal_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $grid = $form['#grid'];
  $faction = $grid->getPlayingFaction();
  $faction->callForADraw();
  $grid = $faction->getBattlefield();
  _kw_djambi_save_game($grid);
}

/**
 * Soumission du bouton "Accepter une partie nulle"
 */
function kw_djambi_game_form_accept_peace_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $grid = $form['#grid'];
  $faction = $grid->getPlayingFaction();
  $faction->acceptDraw();
  $grid = $faction->getBattlefield();
  _kw_djambi_save_game($grid);
}

/**
 * Soumission du bouton "Refuser une partie nulle"
 */
function kw_djambi_game_form_reject_peace_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $grid = $form['#grid'];
  $faction = $grid->getPlayingFaction();
  $faction->rejectDraw();
  _kw_djambi_save_game($grid);
}

/**
 * Soumission du bouton "Afficher le mouvement précédent"
 */
function kw_djambi_game_form_show_prev_move_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  if (isset($form_state['do_not_show_moves'])) {
    unset($form_state['do_not_show_moves']);
  }
  $form_state['show_turn_move'] = $form['show_moves']['#value']['prev'];
}

/**
 * Soumission du bouton "Afficher le mouvement suivant"
 */
function kw_djambi_game_form_show_next_move_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  if (isset($form_state['do_not_show_moves'])) {
    unset($form_state['do_not_show_moves']);
  }
  $form_state['show_turn_move'] = $form['show_moves']['#value']['next'];
}

/**
 * Soumission du bouton "Cacher les derniers mouvements"
 */
function kw_djambi_game_form_hide_moves_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $form_state['do_not_show_moves'] = TRUE;
  if (isset($form_state['show_turn_move'])) {
    unset($form_state['show_turn_move']);
  }
}

/**
 * Soumission du bouton "Actualiser"
 */
function kw_djambi_game_form_refresh_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $grid = $form['#grid'];
  $form_state['time_based_moves'] = $grid->getInfo('changed');
}

/**
 * Soumission du bouton "Rejoindre une partie"
 */
function kw_djambi_game_form_participate_submit($form, &$form_state) {
  $grid = $form['#grid'];
  if ($grid->getStatus() != KW_DJAMBI_STATUS_RECRUITING) {
    return;
  }
  $form_state['rebuild'] = TRUE;
  $clicked_button = $form_state['clicked_button']['#name'];
  $faction_id = substr($clicked_button, 4);
  $nb_empty_factions = 0;
  foreach ($grid->getFactions() as $faction) {
    if ($faction->getId() != $faction_id) {
      if (_kw_djambi_check_current_user($faction)) {
        $faction->setStatus(KW_DJAMBI_USER_EMPTY_SLOT);
      }
      if ($faction->getStatus() == KW_DJAMBI_USER_EMPTY_SLOT) {
        $nb_empty_factions++;
      }
    }
  }
  $faction = $grid->getFactionById($faction_id);
  if ($faction->getStatus() == KW_DJAMBI_USER_EMPTY_SLOT) {
    $faction->setStatus(KW_DJAMBI_USER_READY);
    $user_data = $faction->getUserData();
    $user_data['joined'] = time();
    _kw_djambi_update_user_infos($user_data, $faction->getUserDataItem('djuid'), TRUE);
    if ($nb_empty_factions == 0) {
      $grid->setStatus(KW_DJAMBI_STATUS_PENDING);
    }
    global $user;
    $grid->logEvent('info', 'NEW_TEAM', array('faction1' => $faction->getId(),
        '!user_id' => $user->uid, '!user_ip' => $_SERVER['REMOTE_ADDR']));
    drupal_set_message(t('You are now playing the !color team.', array('!color' => $faction->getName())));
    _kw_djambi_save_game($grid);
  }
  else {
    drupal_set_message(t('This faction is used by an other player.'), 'error');
  }
}

/**
 * Soumission du bouton "Quitter la partie"
 */
function kw_djambi_game_form_cancel_participation_submit($form, &$form_state) {
  $grid = $form['#grid'];
  if ($grid->getStatus() == KW_DJAMBI_STATUS_RECRUITING) {
    $nb_playing_factions = 0;
    foreach ($grid->getFactions() as $faction) {
      if (_kw_djambi_check_current_user($faction)) {
        $faction->setStatus(KW_DJAMBI_USER_EMPTY_SLOT);
      }
      if ($faction->getStatus() == KW_DJAMBI_USER_READY) {
        $nb_playing_factions++;
      }
    }
    if ($nb_playing_factions == 0) {
      node_delete($grid->getId());
    }
    else {
      global $user;
      $grid->logEvent('info', 'TEAM_EXIT', array('!user_id' => $user->uid, '!user_ip' => $_SERVER['REMOTE_ADDR']));
      _kw_djambi_save_game($grid);
    }
    drupal_set_message(t('You just left Djambi game #!nb', array('!nb' => $grid->getInfo('sequence'))));
    drupal_goto('<front>');
  }
}

/**
 * Renvoie une liste d'événements survenus lors d'une partie
 * @param DjambiBattlefield $grid
 */
function _kw_djambi_build_log(DjambiBattlefield $grid) {
  $log = array();
  foreach ($grid->getEvents() as $key => $event) {
    $msg = _kw_djambi_describe_event($event, $grid);
    $log["time"][] = $event["time"];
    $log["msg"][] = "<div class='event ". $event["type"] . "'><span class=''>" . format_date($event["time"], "short") . " :</span> " . $msg . "</div>";
  }
  foreach ($grid->getMoves() as $key => $move) {
    $msg = _kw_djambi_describe_move($move, $grid);
    if (!empty($msg)) {
      $log["time"][] = $move["time"];
      $log["msg"][] = "<div class='" . $move["type"] . "'><span class=''>" . format_date($move["time"], "short") . " :</span>  " . $msg . "</div>";
    }
  }
  array_multisort($log["time"], SORT_DESC, $log["msg"]);
  return $log;
}

/**
 * Génère les tableaux de statistiques
 * @param DjambiBattlefield $grid
 * @return multitype:Ambigous <An, string>
 */
function _kw_djambi_build_stats(DjambiBattlefield $grid) {
  $items = array();
  $factions = $grid->getFactions();
  $throne = NULL;
  $ranking = array();
  $players = array();
  foreach ($factions as $faction) {
    if (in_array($faction->getStatus(), array(KW_DJAMBI_USER_VASSALIZED, KW_DJAMBI_USER_EMPTY_SLOT))) {
      continue;
    }
    if ($grid->getMode() != KW_DJAMBI_MODE_SANDBOX) {
      $username = theme('username', array('account' => user_load($faction->getUserDataItem('uid'))))
        . ($faction->getUserDataItem('uid') == 0 ? ' (' . $faction->getUserDataItem('ip') . ')' : '');
      $players[$faction->getId()] = $username;
    }
    $ranking[$faction->getId()] = $faction->getRanking();
    $stats['peace'][$faction->getId()] = 0;
  }
  if (!empty($ranking)) {
    asort($ranking);
  }
  foreach ($grid->getTurns() as $turn) {
    if (!empty($turn['end'])) {
      @$stats['playtime'][$turn['side']] += $turn['end'] - $turn['begin'];
    }
    if ($turn['turn_scheme'] % 2 == 1) {
      @$stats['throne'][$turn['side']]++;
    }
  }
  foreach ($grid->getMoves() as $key => $move) {
    if ($move['type'] == 'move') {
      $cells = $grid->getCells();
      $distance = max(
          abs($cells[$move['from']]['x'] - $cells[$move['to']]['x']),
          abs($cells[$move['from']]['y'] - $cells[$move['to']]['y']));
      @$stats['mobility'][$move['target']] += $distance;
      @$stats['moves']['turns'][$move['target_faction']]++;
      @$stats['moves']['distance'][$move['target_faction']] += $distance;
    }
    elseif ($move['type'] == 'murder') {
      @$stats['murders'][$move['acting_faction']][$move['target_faction']]++;
      if (isset($stats['peace'][$move['acting_faction']])) {
        $stats['peace'][$move['acting_faction']]++;
      }
      @$stats['terminator'][$move['acting']]++;
      if ($grid->getPieceById($move['acting'])->getType() == 'reporter') {
        $target = $grid->getPieceById($move['target']);
        @$stats['pulitzer'][$move['acting']]++;
        if ($target->getHability('must_live')) {
          $stats['pulitzer'][$move['acting']] += 4;
        }
        if ($target->getHability('move_dead_pieces')) {
          $stats['pulitzer'][$move['acting']] += 1;
        }
        if (!$target->getHability('limited_move')) {
          $stats['pulitzer'][$move['acting']] += 2;
        }
      }
    }
    elseif ($move['type'] == 'manipulation') {
      @$stats['manipulation'][$move['acting_faction']]++;
    }
    elseif ($move['type'] == 'necromobility') {
      @$stats['necromobility'][$move['acting_faction']]++;
    }
  }
  if ($grid->getStatus() == KW_DJAMBI_STATUS_FINISHED) {
    $header = array(
        array('data' => t('Award')),
        array('data' => t('Awarded to'))
    );
    $rows = array();
    $winners_array = array_keys($ranking, 1, TRUE);
    $winners = array();
    foreach ($winners_array as $winner) {
      $faction = $grid->getFactionById($winner);
      $winners[] = '<span class="faction ' . $faction->getClass() . '">' . $faction->getName() . '</span>'
        . (!empty($players[$winner]) ? ' ' . $players[$winner] : '');
    }
    $rows[] = array(
        'data' => array(
            array('data' => count($winners) == 1 ? t('Great Beloved Ruler of Djambi') : t("No winner in this game... Last standing teams :"),
                'header' => TRUE),
            array('data' => t('!pieces', array(
                '!pieces' => implode(', ', $winners)))
            )
        ));
    $ranking_array = array();
    foreach ($ranking as $side => $rank) {
      if (empty($rank) || $rank == 1) {
        continue;
      }
      $faction = $grid->getFactionById($side);
      $ranking_array[] = t('Rank !rank :  !side', array(
          '!rank' => $rank,
          '!side' => '<span class="faction ' . $faction->getClass() . '">' . $faction->getName() . '</span>'
            . (!empty($players[$side]) ? ' ' . $players[$side] : '')
      ));
    }
    if (!empty($ranking_array)) {
      $rows[] = array(
          'data' => array(
              array('data' => t('Ashamed loser opponents'), 'header' => TRUE),
              array('data' => theme('item_list', array('items' => $ranking_array)))
          )
      );
    }
    if (!empty($stats['mobility']) && max($stats['mobility']) > 1) {
      $move =
      $rows[] = array(
          'data' => array(
              array('data' => t('Forrest Gump Price of mobility'), 'header' => TRUE),
              array('data' => t('!pieces, with !nb cases crossed', array(
                  '!pieces' => implode(', ', _kw_djambi_stats_get_winners($grid, 'mobility', $stats)),
                  '!nb' => max($stats['mobility'])))
              )
          ));
    }
    if (!empty($stats['terminator']) && max($stats['terminator']) > 1) {
      $rows[] = array(
          'data' => array(
              array('data' => t('Sarah Connor Price of best serial killer'), 'header' => TRUE),
              array('data' => t('!pieces, with !nb victims', array(
                  '!pieces' => implode(', ', _kw_djambi_stats_get_winners($grid, 'terminator', $stats)),
                  '!nb' => max($stats['terminator'])))
              )
          ));
    }
    if (!empty($stats['necromobility'])) {
      $nmove = max($stats['necromobility']);
      $rows[] = array(
          'data' => array(
              array('data' => t('Pope Formose Price of dead bodies exhumation'), 'header' => TRUE),
              array('data' => format_plural($nmove, '!pieces, with !nb exhumation', '!pieces, with !nb exhumations', array(
                  '!pieces' => implode(', ', _kw_djambi_stats_get_winners($grid, 'necromobility', $stats, 'faction')),
                  '!nb' => $nmove)))
          ));
    }
    if (!empty($stats['manipulation'])) {
      $manipulations = max($stats['manipulation']);
      $rows[] = array(
          'data' => array(
              array('data' => t('Machiavelli Price of manipulation'), 'header' => TRUE),
              array('data' => format_plural($manipulations, '!pieces, with !nb manipulated piece', '!pieces, with !nb manipulated pieces', array(
                  '!pieces' => implode(', ', _kw_djambi_stats_get_winners($grid, 'manipulation', $stats, 'faction')),
                  '!nb' => $manipulations))
              )
          ));
    }
    if (!empty($stats['peace']) && min($stats['peace']) < 2) {
      $rows[] = array(
          'data' => array(
              array('data' => t('Nobel Price of peace'), 'header' => TRUE),
              array('data' => implode(', ', _kw_djambi_stats_get_winners($grid, 'peace', $stats, 'faction', 'min')))
          ));
    }
    if (!empty($stats['pulitzer'])) {
      $scandals = max($stats['pulitzer']);
      $rows[] = array(
          'data' => array(
              array('data' => t('Pulitzer Price'), 'header' => TRUE),
              array('data' => implode(', ', _kw_djambi_stats_get_winners($grid, 'pulitzer', $stats)))
          ));
    }
    $items[] = theme('table', array('header' => $header, 'rows' => $rows, 'caption' => 'Table of honours'));
  }
  // Tableau des victimes
  $header = array();
  $header['Sides'] = array('data' => t('Sides'));
  $rows = array();
  $global_total = array(
      'Sides' => array('data' => 'Total', 'header' => TRUE),
  );
  $global_total_data = 0;
  foreach ($factions as $key => $faction) {
    if (in_array($faction->getStatus(), array(KW_DJAMBI_USER_EMPTY_SLOT, KW_DJAMBI_USER_VASSALIZED))) {
      continue;
    }
    $header[$faction->getId()] = array(
        'data' => t('!faction deaths', array('!faction' => $faction->getId())),
        'class' => array($faction->getClass(), 'faction', 'stats')
    );
    $row = array();
    $row['Sides'] = array(
        'class' => array($faction->getClass(), 'faction'),
        'data' => t('!faction murders', array('!faction' => $faction->getName())),
        'header' => TRUE);
    $total = 0;
    foreach ($factions as $subkey => $subfaction) {
      if (in_array($subfaction->getStatus(), array(KW_DJAMBI_USER_EMPTY_SLOT, KW_DJAMBI_USER_VASSALIZED))) {
        continue;
      }
      $murders = isset($stats['murders'][$faction->getId()][$subfaction->getId()]) ?
      $stats['murders'][$faction->getId()][$subfaction->getId()] : 0;
      $total += $murders;
      $std_row = array('data' => $murders, 'class' => array('number'));
      if ($grid->getOption('rule_canibalism') == 'yes' || $grid->getOption('rule_press_liberty') == 'foxnews') {
        $row[$subfaction->getId()] = $std_row;
      }
      else {
        $row[$subfaction->getId()] = ($faction->getId() != $subfaction->getId()) ? $std_row
        : array('data' => '-', 'class' => array('locked'));
      }
      if (!isset($global_total[$subfaction->getId()])) {
        $global_total[$subfaction->getId()] = array(
            'data' => 0,
            'class' => array('total', 'number')
        );
      }
      $global_total[$subfaction->getId()]['data'] += $murders;
    }
    $row['Total'] = array('data' => $total, 'class' => array('total', 'number'));
    $global_total_data += $total;
    $rows[] = $row;
  }
  $global_total['Total'] = array('data' => $global_total_data, 'class' => array('number'));
  $rows[] = array('data' => $global_total, 'class' => array('total'));
  $header['Total'] = array('data' => t('Total'));
  $items[] = theme('table', array('header' => $header, 'rows' => $rows, 'caption' => t('Table of dead pieces')));
  // Tableau des déplacements
  $header = array(
      0 => array('data' => t('Sides')),
      6 =>  array('data' => t('Status')),
      1 =>  array('data' => t('Moves')),
      2 =>  array('data' => t('Distance')),
      3 =>  array('data' => t('Rule length')),
      4 =>  array('data' => t('Play time')),
      5 =>  array('data' => '<abbr title="'. t("Average turn duration") .'">' . t('Avg t.d.') . '</abbr>')
  );
  $rows = array();
  $total = array(
      'class' => array('total'),
      'data' => array(
          0 => array('data' => 'Total'),
          6 => array('data' => _kw_djambi_get_translatable_messages($grid->getStatus())),
          1 => array('data' => 0, 'class' => array('number')),
          2 => array('data' => 0, 'class' => array('number')),
          3 => array('data' => 0, 'class' => array('number')),
          4 => array('data' => 0, 'class' => array('number')),
          5 => array('data' => '-', 'class' => array('number'))
      )
  );
  foreach ($factions as $faction) {
    if (in_array($faction->getStatus(), array(KW_DJAMBI_USER_EMPTY_SLOT, KW_DJAMBI_USER_VASSALIZED))) {
      continue;
    }
    $row = array();
    $row[0] = array(
        'data' => t('!faction', array('!faction' => $faction->getName())),
        'class' => array($faction->getClass(), 'faction', 'stats'),
        'header' => TRUE
    );
    $row[6] = array('data' => _kw_djambi_get_translatable_messages($faction->getStatus()));
    $row[1] = array(
        'data' => !empty($stats['moves']['turns'][$faction->getId()]) ? $stats['moves']['turns'][$faction->getId()] : 0,
        'class' => 'number');
    $total['data'][1]['data'] += $row[1]['data'];
    $row[2] = array(
        'data' => !empty($stats['moves']['distance'][$faction->getId()]) ? $stats['moves']['distance'][$faction->getId()] : 0,
        'class' => 'number');
    $total['data'][2]['data'] += $row[2]['data'];
    $row[3] = array(
        'data' => !empty($stats['throne'][$faction->getId()]) ? $stats['throne'][$faction->getId()] : 0,
        'class' => 'number');
    $total['data'][3]['data'] += $row[3]['data'];
    $row[4] = array(
        'data' => !empty($stats['playtime'][$faction->getId()]) ?
        kw_tools_duration($stats['playtime'][$faction->getId()]) : 0,
        'class' => 'number');
    if (isset($stats['playtime'][$faction->getId()])) {
      $total['data'][4]['data'] += $stats['playtime'][$faction->getId()];
    }
    $row[5] = array(
        'data' => !empty($stats['playtime'][$faction->getId()]) && !empty($stats['moves']['turns'][$faction->getId()]) ?
        kw_tools_duration($stats['playtime'][$faction->getId()] / $stats['moves']['turns'][$faction->getId()]) : '-',
        'class' => 'number');
    $rows[] = $row;
  }
  if ($total['data'][1]['data'] > 0) {
    $total['data'][5]['data'] = kw_tools_duration($total['data'][4]['data'] / $total['data'][1]['data']);
  }
  $total['data'][4]['data'] = kw_tools_duration($total['data'][4]['data']);
  $rows[] = $total;
  $items[] = theme('table', array('header' => $header, 'rows' => $rows, 'caption' => 'Table of moves'));
  return $items;
}

/**
 * Fonction d'aide à la génération des statistiques
 * Détermine le vainqueur d'un prix
 */
function _kw_djambi_stats_get_winners($grid, $price, $stats, $type = 'piece', $order = 'max') {
  $winners = array_keys($stats[$price], $order == 'min' ? min($stats[$price]) : max($stats[$price]));
  $winners_string_array = array();
  foreach ($winners as $winner) {
    if ($type == 'piece') {
      $piece = $grid->getPieceById($winner);
      $winners_string_array[] = '<span class="piece ' . $piece->getType() . ' ' . $piece->getFaction()->getClass() . '">' . _kw_djambi_get_full_piece_name($piece) . '</span>';
    }
    elseif ($type == 'faction') {
      $faction = $grid->getFactionById($winner);
      $winners_string_array[] = '<span class="faction ' . $faction->getClass() . '">' . $faction->getName() . '</span>';
    }
  }
  return $winners_string_array;
}

/**
 * Traduction des chaînes de caractères présentes dans les classes du dossier lib
 */
function _kw_djambi_get_translatable_messages($message, $args = NULL, DjambiBattlefield $grid = NULL) {
  if (isset($args['faction1']) && !is_null($grid)) {
    $faction1 = $grid->getFactionById($args['faction1']);
    $args['!faction1'] = '<span class="faction ' . $faction1->getClass() . '">' . $faction1->getName() . '</span>';
    unset($args['faction1']);
  }
  if (isset($args['faction2']) && !is_null($grid)) {
    $faction2 = $grid->getFactionById($args['faction2']);
    $args['!faction2'] = '<span class="faction ' . $faction2->getClass() . '">' . $faction2->getName() . '</span>';
    unset($args['faction2']);
  }
  if (isset($args['piece']) && !is_null($grid)) {
    $piece = $grid->getPieceById($args['piece']);
    $args['!piece'] = '<span class="piece ' . $piece->getType() . '">' . _kw_djambi_get_full_piece_name($piece) . '</span>';
    unset($args['piece']);
  }
  if (isset($args['!user_id']) && isset($args['!user_ip'])) {
    $user = user_load($args['!user_id']);
    $username = theme('username', array('account' => $user));
    if ($user->uid == 0) {
      $username .= ' (' . $args['!user_ip'] . ')';
    }
    $args['!user'] = $username;
  }
  switch($message) {
    case("THRONE_ACCESS"):
      $txt = t("!piece is now the great and beloved ruler of the djambi world.", $args);
      break;
    case("THRONE_RETREAT"):
      $txt = t("!piece's reign of despotism and terror is now over.", $args);
      break;
    case("THRONE_EVACUATION"):
      $txt= t("!piece body has been exhumed from his mausoleum.", $args);
      break;
    case("THRONE_MURDER"):
      $txt= t("!piece has been killed during his reign !", $args);
      break;
    case("THRONE_MAUSOLEUM"):
      $txt= t("!piece body has been placed in the throne case mausoleum. Let's worship his memory.", $args);
      break;
    case('DIPLOMAT_GOLDEN_MOVE'):
      $txt = t("!piece has just achieved a diplomat golden move !", $args);
      break;
    case('ASSASSIN_GOLDEN_MOVE'):
      $txt = t("!piece has just achieved an assassin golden move !", $args);
      break;
    case("NEW_DJAMBI_GAME"):
      $txt = t("New djambi chess game created.");
      break;
    case("SURROUNDED"):
      $txt = t("!faction1 leader is surrounded by dead pieces and cannot access to power anymore.", $args);
      break;
    case("END"):
      $txt = t("End of the game !");
      break;
    case("DRAW"):
      $txt = t("This is a draw.");
      break;
    case("THE_WINNER_IS"):
      $txt = t("!faction1 wins !!!", $args);
      break;
    case("TURN_BEGIN"):
      $txt = t("!faction1 turn begins.", $args);
      break;
    case("NEW_TURN"):
      $txt = t("Turn !turn begins.", $args);
      break;
    case("SKIPPED_TURN"):
      $txt = t("!faction1 skipps his turn.", $args);
      break;
    case(KW_DJAMBI_MODE_SANDBOX):
      $txt = t("Sandbox game");
      break;
    case(KW_DJAMBI_MODE_FRIENDLY):
      $txt = t("Friendly game");
      break;
    case(KW_DJAMBI_STATUS_PENDING):
      $txt = t("Game in progress...");
      break;
    case(KW_DJAMBI_STATUS_FINISHED):
      $txt = t("Game over !");
      break;
    case(KW_DJAMBI_STATUS_DRAW_PROPOSAL):
      $txt = t("Peace negociation...");
      break;
    case("Sniper"):
      $txt = t("Sniper");
      break;
    case("Leader"):
      $txt = t("Leader");
      break;
    case("Necromobil"):
      $txt = t("Necromobil");
      break;
    case("Diplomat"):
      $txt = t("Diplomat");
      break;
    case("Reporter"):
      $txt = t("Reporter");
      break;
    case("Leader"):
      $txt = t("Leader");
      break;
    case("Militant #1"):
      $txt = t("Militant #1");
      break;
    case("Militant #2"):
      $txt = t("Militant #2");
      break;
    case("Militant #3"):
      $txt = t("Militant #3");
      break;
    case("CHANGING_SIDE"):
      $txt = t("The desperate remaining !faction1 side's partisans are now joining the !faction2 side !", $args);
      break;
    case("INDEPENDANT_SIDE"):
      $txt = t("The desperate remaining !faction1 side's partisans are no longing supporting the !faction2 side.", $args);
      break;
    case("GAME_OVER"):
      $txt = t("Game over for !faction1 side !", $args);
      break;
    case("WITHDRAWAL"):
      $txt = t("The hopeless !faction1 leader decided to withdraw from the game. Shame on him.
        His remaining pieces stay neutrally in the board, waiting for a better cause to support.", $args);
      break;
    case("Red"):
      $txt = t("Red");
      break;
    case("Blue"):
      $txt = t("Blue");
      break;
    case("Yellow"):
      $txt = t("Yellow");
      break;
    case("Green"):
      $txt = t("Green");
      break;
    case("DRAW_PROPOSAL"):
      $txt = t("The !faction1 side has called for a draw.", $args);
      break;
    case("DRAW_ACCEPTED"):
      $txt = t("The !faction1 side accepted the draw proposal.", $args);
      break;
    case("DRAW_REJECTED"):
      $txt = t("The !faction1 side rejected the draw proposal.", $args);
      break;
    case("MODE_SANDBOX_DESCRIPTION"):
      $txt = t('Sandbox game - you control successively all sides of the game. '
        . 'Useful to discover the Djambi rules, to test alone new strategies, '
        . ' or to play with other people on the same screen.');
      break;
    case("MODE_FRIENDLY_DESCRIPTION"):
      $txt = t('Friendly game - play online Djambi games with unknown human players, just for fun.');
      break;
    case("4STD_DESCRIPTION"):
      $txt = t("4 players, on a standard (9x9) square grid");
      break;
    case("2STD_DESCRIPTION"):
      $txt = t("2 players, on a standard (9x9) square grid. Each side controls an additional vassalized faction.");
      break;
    case("COMEBACK_AFTER_SURROUND"):
      $txt = t("The !faction1 leader is not surrounded anymore by dead pieces. It's a come back for !faction1 side !", $args);
      break;
    case("COMEBACK_AFTER_WITHDRAW"):
      $txt = t("The !faction1 side got some new hope and is back in the game.", $args);
      break;
    case("RULE1"):
        $txt = t("Leader surrounding rule");
    break;
    case("RULE3"):
        $txt = t("Team vassalization rule");
    break;
    case("RULE2"):
        $txt = t("Come-back possibilities rule");
    break;
    case("RULE4"):
        $txt = t("Canibalism rule");
    break;
    case("RULE5"):
        $txt = t("Self manipulation rule");
    break;
    case("RULE6"):
        $txt = t("Press liberty rule");
    break;
    case("RULE7"):
      $txt = t("Throne case interactions rule");
      break;
    case("RULE1_STRICT"):
      $txt = t('A leader is eliminated if he is not occupying the throne case, '
                  . 'if he or his controlled adjacent pieces are surrounded by dead peaces (without empty cells) '
                  . 'even if he is still controlling a living necromobile.');
    break;
    case("RULE1_LOOSE"):
      $txt = t('A leader is eliminated if he is not occupying the throne case, '
                  . 'if he or his controlled adjacent pieces cannot move due to dead pieces barricade '
                  . 'and if he is not controlling a living necromobile.');
    break;
    case("RULE1_THRONE_ACCESS"):
      $txt = t('A leader is eliminated if the way to throne case is locked by dead pieces (even if he can still move)'
                  . ' and if he has no living necromobile among his controlled pieces.');
    break;
    case("RULE3_TEMPORARY"):
      $txt = t('A player who acceeds to power gains control of the withdrawn or surrounded leaders sides just during the time of his reign.');
    break;
    case("RULE3_FULL_CONTROL"):
      $txt = t('A player who acceeds to power gains full control of the withdrawn or surrounded leaders sides until the end of the game,'
                  .' even if he leaves the throne case.');
    break;
    case("RULE2_NEVER"):
      $txt = t('No come-back.');
    break;
    case("RULE2_SURROUNDING"):
      $txt = t('A player who had a surrounded leader can play again if his leader is not surrounded anymore, even if he is controlled by another team.');
    break;
    case("RULE2_ALLOWED"):
      $txt = t('A player who had withdrawn or had a surrounded leader can play again if his leader is still alive, not surrounded and not controlled by an another team.');
    break;
    case("RULE4_YES"):
      $txt = t('The end justifies the means. If needed, there will be sacrifices. They will remain in our memories.');
    break;
    case("RULE4_NO"):
      $txt = t('No way, killing your own pieces is forbidden.');
    break;
    case("RULE4_ETHICAL"):
      $txt = t('Responsible game : you cannot kill your own pieces and neutral pieces.');
      break;
    case("RULE4_VASSALS"):
      $txt = t('Killing vassalized pieces may be possible.');
    break;
    case("RULE5_NEVER"):
      $txt = t('Your diplomats are never allowed to manipulate pieces that you are controlling.');
    break;
    case("RULE5_VASSAL"):
      $txt = t('Your diplomat can manipulate vassalized pieces.');
    break;
    case("RULE6_PRAVDA"):
      $txt = t('Pradva style reporters : your reporters will never involve your own pieces in their scoops, '
                  . 'but they can eliminate one ennemy per move.');
    break;
    case("RULE6_FOXNEWS"):
      $txt = t('Fox News style reporters : your reporters can involve several pieces in their moves, '
                  . 'but some scandals can also concern your own troups.');
    break;
    case("RULE7_NORMAL"):
      $txt = t("Standard rules");
      break;
    case("RULE7_EXTENDED"):
      $txt = t("Extended rules : dead leaders can access to power posthumously, allow assassins and diplomats master moves.");
      break;
    case("OPTION2"):
       $txt = t("Turns before each draw proposal availability");
    break;
    case("OPTION2_NEVER"):
       $txt = t("No draw !");
    break;
    case("OPTION2_ALWAYS"):
       $txt = t("Unlimited draw proposal");
    break;
    case("OPTION1_XTIME"):
       $txt = format_plural($args['!value'], '!value time', '!value times', $args);
    break;
    case("OPTION1"):
       $txt = t("Allowed skipped turns per user before elimination");
    break;
    case("OPTION1_NEVER"):
       $txt = t("Skipping turns is forbidden !");
    break;
    case("OPTION1_ALWAYS"):
       $txt = t("No limits, you can always skip your turn.");
    break;
    case("OPTION2_XTURN"):
       $txt = format_plural($args['!value'], '!value turn', '!value turns', $args);
    break;
    case(KW_DJAMBI_USER_PLAYING):
      $txt = t('playing');
    break;
    case(KW_DJAMBI_USER_WINNER):
      $txt = t('winner');
    break;
    case(KW_DJAMBI_USER_DRAW):
      $txt = t('draw');
    break;
    case(KW_DJAMBI_USER_KILLED):
      $txt = t('killed');
    break;
    case(KW_DJAMBI_USER_WITHDRAW):
      $txt = t('withdrawn');
    break;
    case(KW_DJAMBI_USER_SURROUNDED):
      $txt = t('surrounded');
    break;
    case(KW_DJAMBI_USER_DEFECT):
      $txt = t('defect');
    break;
    case(KW_DJAMBI_USER_EMPTY_SLOT):
      $txt = t('empty');
    break;
    case(KW_DJAMBI_USER_READY):
      $txt = t('ready');
    break;
    case(KW_DJAMBI_USER_VASSALIZED):
      $txt = t('vassalized');
    break;
    case('NEW_TEAM');
      $txt = t('!faction1 side is now controlled by !user', $args);
    break;
    case('TEAM_EXIT'):
      $txt = t('!user left the game.', $args);
    break;
      /*case(""):
       $txt = t("");
      break;*/
    default:
      $txt = $message;
  }
  return $txt;
}