<?php
// $Id$

/**
 * Implements hook_menu().
 */
function kw_djambi_menu() {
  $items['djambi/%/check-update/%'] = array(
    'page callback' => 'kw_djambi_check_update',
    'page arguments' => array(1, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  $items['djambi/refresh/%'] = array(
    'page callback' => 'kw_djambi_refresh_area',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function kw_djambi_permission() {
  return array(
    'administer djambi games' => array(
      'title' => t('Administer djambi games'),
      'description' => t('Perform administrative tasks dealing with djambi games.')
    )
  );
}

/**
 * Implements hook_theme().
 */
function kw_djambi_theme() {
  return array(
    'djambi_grid' => array(
        'render element' => 'form',
        'file' => 'kw_djambi.theme.inc'
     ),
     'djambi_recruiting_phase' => array(
         'render element' => 'form',
         'file' => 'kw_djambi.theme.inc'
     ),
     'hexagonal_grid' => array(
         'variables' => array('rows' => array(), 'caption' => NULL, 'attributes' => array()),
         'file' => 'kw_djambi.theme.inc'
     ),
  );
}

/**
 * Implements hook_block_info().
 */
function kw_djambi_block_info() {
  $blocks['djambi_games'] = array(
      'info' => t('Djambi games'),
      'cache' => DRUPAL_NO_CACHE
  );
  $blocks['djambi_panel'] = array(
      'info' => t('My djambi games'),
      'cache' => DRUPAL_NO_CACHE
  );
  return $blocks;
}

function kw_djambi_block_view($delta) {
  switch ($delta) {
    case ('djambi_games') :
      module_load_include('inc', 'kw_djambi', 'kw_djambi.blocks');
      $block['subject'] = t('Djambi games');
      $block['content'] = _kw_djambi_list_games();
      return $block;
    break;
    case ('djambi_panel') :
      module_load_include('inc', 'kw_djambi', 'kw_djambi.blocks');
      $block['subject'] = t('My Djambi games');
      $block['content'] = _kw_djambi_list_user_games();
      return $block;
    break;
  }
}

/**
 * Implements hook_cron().
 */
function kw_djambi_cron() {
  $q = db_select('djambi_node', 'dj');
  $q->fields('dj', array('nid'));
  $q->condition('dj.autodelete', time(), '<');
  $q->condition('dj.autodelete', 0, '!=');
  $nids = $q->execute()->fetchCol('nid');
  if (!empty($nids)) {
    node_delete_multiple($nids);
  }
}

/**
 * Implements hook_node_info().
 * Création d'un nouveau type de contenu "partie de Djambi".
 */
function kw_djambi_node_info() {
  return array(
    'kw_djambi' => array(
      'name' => t('Djambi game'),
      'base' => 'node_content',
      'description' => t('Create a new machiavelli chess game.'),
      'has_title' => FALSE,
      'locked' => TRUE
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function kw_djambi_form_kw_djambi_node_form_alter(&$form, &$form_state) {
  if (!$form["nid"]["#value"]) {
    $form['actions']['submit']['#value'] = t('Begin game');
    $form['basics'] = array(
        '#type' => 'fieldset',
        '#title' => t('Game presets')
    );
    $nb_players_options = DjambiBattlefield::getDispositions('description');
    foreach ($nb_players_options as $option => $description) {
      $nb_players_options[$option] = _kw_djambi_get_translatable_messages($description);
    }
    $form['basics']['nb_players'] = array(
        '#type' => 'radios',
        '#title' => t('Number of players'),
        '#default_value' => '4std',
        '#options' => $nb_players_options
    );
    $mode_options = DjambiBattlefield::getModes(TRUE);
    global $user;
    $cookie = _kw_djambi_cookie();
    $allowed = _kw_djambi_check_user_already_playing($user, array_keys($mode_options), $cookie, FALSE);
    foreach ($mode_options as $option => $description) {
      if (!isset($allowed[$option])) {
        unset($mode_options[$option]);
      }
      else {
        $mode_options[$option] = _kw_djambi_get_translatable_messages($description);
      }
    }
    if (empty($mode_options) || (isset($_GET['mode']) && !isset($allowed[$_GET['mode']]))) {
      drupal_access_denied();
    }
    if (isset($_GET['mode']) && isset($mode_options[$_GET['mode']])) {
      $form['basics']['mode'] = array(
        '#type' => 'value',
        '#value' => $_GET['mode']
      );
      $form['basics']['mode_item'] = array(
        '#type' => 'item',
        '#title' => t('Game mode'),
        '#markup' => $mode_options[$_GET['mode']]
      );
    }
    else {
      $form['basics']['mode'] = array(
        '#type' => 'radios',
        '#title' => t('Game mode'),
        '#default_value' => KW_DJAMBI_MODE_FRIENDLY,
        '#options' => $mode_options
      );
    }
    $form['advanced'] = array(
        '#type' => 'fieldset',
        '#title' => t('Advanced options'),
        '#tree' => TRUE,
        '#collapsible' => TRUE,
        '#collapsed' => TRUE
    );
    $form['#attached']['css'][] = drupal_get_path('module', 'kw_djambi').'/kw_djambi.css';
    $defaults = DjambiBattlefield::getOptionsInfo();
    $nb_rule = 0;
    $nb_option = 0;
    foreach($defaults as $option => $data) {
      if ($data['configurable']) {
        $form['advanced'][$option] = array(
            '#type' => $data['widget'],
            '#default_value' => isset($_GET[$option]) ? $_GET[$option] : $data['default']
        );
        if (!empty($data['title'])) {
          $form['advanced'][$option]['#title'] = _kw_djambi_get_translatable_messages($data['title']);
        }
        if ($data['type'] == 'rule_variant') {
          $nb_rule++;
          $form['advanced'][$option]['#prefix'] = '<span class="rule-variant">' . t('Rule variant #!number', array('!number' => str_pad($nb_rule, 2, '0', STR_PAD_LEFT))) . '</span>';
        }
        elseif ($data['type'] == 'game_option') {
          $nb_option++;
          $form['advanced'][$option]['#prefix'] = '<span class="game-option">' . t('Game option #!number', array('!number' => str_pad($nb_option, 2, '0', STR_PAD_LEFT))) . '</span>';
        }
        if (in_array($data['widget'], array('radios', 'select'))) {
          $choices = array();
          foreach ($data['choices'] as $choice_key => $description) {
            $choices[$choice_key] = _kw_djambi_get_translatable_messages($description, array('!value' => $choice_key));
          }
          if (isset($_GET[$option]) && !isset($choices[$_GET[$option]])) {
            $form['advanced'][$option]['#default_value'] = $data['default'];
          }
          $form['advanced'][$option]['#options'] = $choices;
        }
      }
    }
    $form['#submit'] = array('kw_djambi_new_game_submit');
  }
  else {
    $node = $form["#node"];
    $grid = _kw_djambi_load_game($node);
    if (user_access('administer djambi games')) {
      if ($grid->getMode() == KW_DJAMBI_MODE_SANDBOX) {
        $form['djambi_mode'] = array(
            '#type' => 'value',
            '#value' => $grid->getMode()
        );
        $form['no_autodelete'] = array(
            '#type' => 'checkbox',
            '#title' => t('Do not autodelete this game'),
            '#description' => t('Finished or inactive games are automatically removed after an amount of time.'
                .' Check this box to keep this game alive.'),
            '#default_value' => $grid->getInfo('autodelete') == 0 ? 1 : 0,
            '#return_value' => 1
        );
        $form['#submit'][] = 'kw_djambi_node_form_extra_submit';
      }
    }
  }
}

/**
 * Soumission d'un formulaire de création de contenu de type kw_djambi.
 * Création d'une nouvelle partie
 * @param String $mode
 */
function kw_djambi_new_game_submit($form, &$form_state) {
  global $user;
  $node = $form['#node'];
  $game_id = variable_get('kw_djambi_game_sequence', 0);
  $game_id++;
  $node->title = t("Machiavelli chess - Game #!i", array("!i" => $game_id));

  $mode = $form_state["values"]["mode"];
  $cookie = _kw_djambi_cookie();
  _kw_djambi_check_user_already_playing($user, $mode, $cookie);
  if ($mode == KW_DJAMBI_MODE_SANDBOX) {
    $node->dj_status = KW_DJAMBI_STATUS_PENDING;
  }
  elseif ($mode == KW_DJAMBI_MODE_FRIENDLY) {
    $node->dj_status = KW_DJAMBI_STATUS_RECRUITING;
  }
  $dispositions = DjambiBattlefield::getDispositions();
  $disposition = $form_state['values']['nb_players'];
  $grid = new DjambiBattlefield(0, array(
      'sequence' => $game_id,
      'mode' => $mode,
      'disposition' => $disposition,
      'user_id' => $user->uid,
      'user_cookie' => $cookie,
  ));
  foreach ($form_state['values']['advanced'] as $option => $value) {
    $grid->setOption($option, $value);
  }
  $node->dj_players = $dispositions[$disposition]['nb'];
  $node->dj_mode = $mode;
  $node->dj_begin = time();
  $node->dj_delete = _kw_djambi_autodelete_time();
  $node->dj_disposition = $disposition;
  $node->dj_users = $grid->getInfo('players_info');
  $node->dj_data = $grid->toDatabase();
  $node->dj_prepared = TRUE;
  $node->dj_battlefield = $grid;
  variable_set('kw_djambi_game_sequence', $game_id);
}

/**
 * Soumission d'un formulaire de création de contenu de type kw_djambi.
 * Traitement des champs réservés aux administrateurs.
 */
function kw_djambi_node_form_extra_submit($form, &$form_state) {
  if (user_access('administer djambi games') && isset($form_state['values']['no_autodelete'])) {
    $q = db_update('djambi_node')
    -> fields(array('autodelete' => $form_state['values']['no_autodelete'] == 1 ? 0 :
        _kw_djambi_autodelete_time()))
    -> condition('nid', $form['#node']->nid)
    -> execute();
  }
}

/**
 * Ajout d'un cookie identifiant un visiteur anonyme.
 */
function _kw_djambi_cookie() {
  global $user;
  // Création d'un cookie si l'utilisateur est anonyme
  if($user->uid == 0) {
    if (empty($_COOKIE['Drupal_visitor_djambi_cookie_id'])) {
      $cookie = uniqid();
      user_cookie_save(array('djambi_cookie_id' => $cookie));
    }
    else {
      $cookie = $_COOKIE['Drupal_visitor_djambi_cookie_id'];
    }
  }
  else {
    $cookie = NULL;
  }
  return $cookie;
}

/**
 * Vérification : l'utilisateur courant participe-t-il déjà à une partie ?
 */
function _kw_djambi_check_user_already_playing($user, $modes, $cookie, $redirect = TRUE) {
  if (!is_array($modes)) {
    $modes_array[] = $modes;
  }
  else {
    $modes_array = $modes;
  }
  // Recherche d'une partie en cours pour l'utilisateur courant
  $q = db_select("djambi_users", "u");
  $q->join("djambi_node", "n", "n.nid = u.nid");
  $q->join("node", "n2", "n.nid = n2.nid");
  $q->fields("n", array("nid", "mode", "status"));
  $q->fields("n2", array("created"));
  $q->condition("n.mode", $modes);
  $q->condition("n.status", DjambiBattlefield::getStatuses(FALSE, TRUE, TRUE, FALSE));
  $q->condition("u.uid", $user->uid);
  if ($user->uid == 0 && !is_null($cookie)) {
    $q->condition('u.cookie', $cookie);
  }
  $results = $q->execute()->fetchAll();
  $allowed = array_flip($modes_array);
  $force_redirect = FALSE;
  foreach ($results as $result) {
    if ($result->mode == KW_DJAMBI_MODE_SANDBOX && in_array($result->status, DjambiBattlefield::getStatuses(FALSE, TRUE, TRUE, FALSE))
        && isset($allowed[KW_DJAMBI_MODE_SANDBOX])) {
      unset($allowed[KW_DJAMBI_MODE_SANDBOX]);
      if ($redirect) {
        $force_redirect = TRUE;
        break;
      }
    }
    if ($result->mode == KW_DJAMBI_MODE_FRIENDLY && in_array($result->status, DjambiBattlefield::getStatuses(FALSE, TRUE, FALSE, FALSE))
        && isset($allowed[KW_DJAMBI_MODE_FRIENDLY])) {
      unset($allowed[KW_DJAMBI_MODE_FRIENDLY]);
      if ($redirect) {
        $force_redirect = TRUE;
        break;
      }
    }
    if (empty($allowed)) {
      break;
    }
  }
  // Si partie en cours : redirection
  if ($force_redirect) {
    if ($result->mode == KW_DJAMBI_MODE_SANDBOX) {
      drupal_set_message(t("You have already begun a !game on !date. "
        . "This game does not seem to be finished : "
        . " switching back to the last played move of the game.",
        array("!date" => format_date($result->created),
            "!game" => _kw_djambi_get_translatable_messages($result->mode))
      ), 'warning');
    }
    elseif ($result->mode == KW_DJAMBI_MODE_FRIENDLY)  {
      drupal_set_message(t("You are already involved in a !game which is in a recruiting phase : "
          . "you cannot create a new game.",
          array("!game" => _kw_djambi_get_translatable_messages($result->mode))
      ), 'warning');
    }
    drupal_goto("node/" . $result->nid);
  }
  else {
    return $allowed;
  }
}

/**
 * Implements hook_insert().
 */
function kw_djambi_node_insert($node) {
  if ($node->type == 'kw_djambi' && isset($node->dj_prepared) && $node->dj_prepared) {
    /* @var $battlefield DjambiBattlefield  */
    $battlefield = $node->dj_battlefield;
    $record = array(
      'nid' => $node->nid,
      'mode' => $node->dj_mode,
      'points' => 0,
      'status' => $node->dj_status,
      'nb_moves' => 0,
      'data' => $node->dj_data,
      'begin' => $node->dj_begin,
      'changed' => $node->dj_begin,
      'autodelete' => $node->dj_delete,
      'compressed' => 0,
      'disposition' => $node->dj_disposition
    );
    drupal_write_record('djambi_node', $record);
    $factions = $battlefield->getFactions();
    /* @var $faction DjambiPoliticalFaction */
    foreach ($factions as $key => $faction) {
      $user = current($node->dj_users);
      $record = array(
        'nid' => $node->nid,
        'uid' => $user['uid'],
        'status' => $user['status'],
        'faction' => $faction->getId(),
        'data' => $user['data'],
        'cookie' => $user['cookie']
      );
      drupal_write_record('djambi_users', $record);
      if (next($node->dj_users) === FALSE) {
        break;
      }
    }
  }
}

/**
 * Implements hook_delete().
 */
function kw_djambi_node_delete($node) {
  db_delete("djambi_users")->condition("nid", $node->nid)->execute();
  db_delete("djambi_node")->condition("nid", $node->nid)->execute();
}

/**
 * Implements hook_node_view().
 */
function kw_djambi_node_view($node, $view_mode) {
  if ($node->type == "kw_djambi" && $view_mode =="full") {
    $node->content["grid"] = drupal_get_form("kw_djambi_game_form", $node);
    $datagrid = $node->content['grid']['#grid'];
    module_load_include('inc', 'kw_djambi', 'kw_djambi.blocks');
    if ($datagrid->getMode() != KW_DJAMBI_MODE_SANDBOX) {
      if (!$datagrid->isNotBegin()) {
        $node->content['navigation'] = _kw_djambi_list_viewable_games(NULL, $node->nid);
      }
      else {
        $node->content['navigation'] = _kw_djambi_list_recruiting_games(NULL, $node->nid);
      }
    }
  }
}

/**
 * Callback : permet de vérifier si un contenu de type kw_djambi a été mis à jour
 *   pendant la consultation de la page.
 */
function kw_djambi_check_update($nid, $version) {
  $query = db_select('djambi_node', 'dj')
    ->fields('dj', array('changed'))
    ->condition('dj.nid', $nid);
  $result = $query->execute()->fetchColumn();
  $return['changed'] = ($result > $version) ? 1 : 0;
  if (!$return['changed']) {
    global $user;
    $return['time-elapsed'] = kw_tools_duration(time() - $result);
    $return['time-last-update'] = format_date(time(), 'custom', 'H:i:s');
    $query = db_select('djambi_users', 'u')
      ->fields('u', array('djuid', 'data', 'uid', 'cookie', 'status'))
      ->condition('u.nid', $nid)
      ->condition('u.status', array('vassalized', 'empty'), 'NOT IN');
    $players = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    $cookie = _kw_djambi_cookie();
    foreach ($players as $player) {
      $data = unserialize($player['data']);
      if (($player['uid'] > 0 && $user->uid == $player['uid']) ||
          (!empty($cookie) && $player['cookie'] == $cookie)) {
        $data = _kw_djambi_update_user_infos($data, $player['djuid']);
      }
      $ping = _kw_djambi_format_ping_infos($data['ping']);
      $return['pings'][$player['djuid']] = array(
        'status' => $ping['status'],
        'title' => $ping['title'],
        'class' => $ping['class']
      );
      if (isset($data['joined'])) {
        $return['pings'][$player['djuid']]['joined'] = format_interval(time() - $data['joined']);
      }
    }
  }
  echo drupal_json_encode($return);
  die();
}

/**
 * Callback : fonction permettant de rafraîchir une zone de l'écran,
 *   générée avec la fonction $callback
 */
function kw_djambi_refresh_area($callback) {
  switch ($callback) {
    case('_kw_djambi_list_user_games'):
      module_load_include('inc', 'kw_djambi', 'kw_djambi.blocks');
      $fragment = 'block-kw-djambi-djambi-panel';
      $target = '#' . $fragment . ' .content';
      $args = array();
    break;
    default:
      drupal_access_denied();
  }
  if(!empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') {
    $ajax = TRUE;
  }
  else {
    $ajax = FALSE;
  }
  if ($ajax) {
    $output = call_user_func_array($callback, $args);
    $commands[] = ajax_command_html($target, drupal_render($output));
    $page = array('#type' => 'ajax', '#commands' => $commands);
    ajax_deliver($page);
  }
  else {
    if (isset($_GET['destination'])) {
      $destination = $_GET['destination'];
    }
    else {
      $destination = '<front>';
    }
    drupal_goto($destination, array(
      'query' => array('destination' => $destination),
      'fragment' => $fragment
    ));
  }
}

/**
 * Mise en forme des informations concernant le ping d'un utilisateur
 */
function _kw_djambi_format_ping_infos($ping_time) {
  $ping['title'] = t("Last connection information sent by this player : !time",
      array('!time' => format_date($ping_time, 'short')));
  $ping_interval = time() - $ping_time;
  if ($ping_interval < 60) {
    $ping['status'] = 'OK';
    $ping['class'] = 'ok';
  }
  elseif ($ping_interval < 60 * 5) {
    $ping['status'] = 'Warning';
    $ping['class'] = 'warning';
  }
  else {
    $ping['status'] = 'Failed !';
    $ping['class'] = 'error';
  }
  return $ping;
}

/**
 * Chargement des données concernant la partie en cours.
 * @param object $node : node de type kw_djambi
 * @return DjambiBattlefield
 */
function _kw_djambi_load_game($node) {
  $query = db_select('djambi_node', 'dj')
      ->fields('dj', array('nid', 'data', 'status', 'mode', 'compressed',
          'autodelete', 'changed', 'disposition'))
      ->condition('dj.nid', $node->nid);
  $result = $query->execute()->fetchAssoc();
  $query = db_select('djambi_users', 'dju')
    ->fields('dju', array('djuid', 'uid', 'faction', 'cookie', 'status', 'ranking', 'data'))
    ->condition("dju.nid", $node->nid);
  $users_result = $query->execute()->fetchAll();
  $users = array();
  foreach($users_result as $key => $user) {
    $users[$user->faction] = array(
        'djuid' => $user->djuid,
        'uid' => $user->uid,
        'cookie' => $user->cookie,
        'status' => $user->status,
        'ranking' => $user->ranking
    );
    if (!empty($user->data)) {
      $user_data = unserialize($user->data);
      if (is_array($user_data)) {
        foreach ($user_data as $label => $data) {
          if (!isset($users[$user->faction][$label])) {
            $users[$user->faction][$label] = $data;
          }
        }
      }
    }
  }
  $data = $result['data'];
  if ($result['compressed']) {
    $data = gzuncompress($data);
  }
  $data = unserialize($data);
  $data["users"] = $users;
  $battlefield = new DjambiBattlefield($result["nid"], $data);
  $battlefield->setMode($result["mode"]);
  $battlefield->setStatus($result["status"]);
  $battlefield->setInfo('autodelete', $result['autodelete']);
  $battlefield->setInfo('changed', $result['changed']);
  $battlefield->setDisposition($result['disposition']);
  $battlefield->play();
  return $battlefield;
}

/**
 * Sauvegarde en BdD du jeu
 * @param DjambiBattlefield $grid
 */
function _kw_djambi_save_game(DjambiBattlefield $grid) {
  $compress = FALSE;
  if ($grid->getStatus() == KW_DJAMBI_STATUS_FINISHED) {
    $compress = TRUE;
  }
  $data = serialize($grid->toDatabase());
  if ($compress) {
    $data = gzcompress($data);
  }
  $query1 = db_update('djambi_node');
  $moves = 0;
  foreach ($grid->getMoves() as $move) {
    if ($move['type'] == 'move') {
      $moves++;
    }
  }
  $autodelete_option = 'std';
  if ($grid->isFinished() && in_array($grid->getMode(), array(KW_DJAMBI_MODE_FRIENDLY))) {
    $autodelete_option = 'extended';
  }
  $query1->fields(array(
      'nb_moves' => $moves,
      'data' => $data,
      'changed' => time(),
      'status' => $grid->getStatus(),
      'autodelete' => $grid->getInfo('autodelete') == 0 ? 0 : _kw_djambi_autodelete_time($autodelete_option),
      'compressed' => $compress ? 1 : 0
  ));
  $query1->condition('nid', $grid->getId());
  $query1->execute();
  foreach ($grid->getFactions() as $key => $faction) {
    $record = array(
        'status' => $faction->getStatus(),
        'ranking' => $faction->getRanking(),
        'djuid' => $faction->getUserData('djuid')
    );
    if ($faction->getStatus() == KW_DJAMBI_USER_EMPTY_SLOT) {
      $record['uid'] = 0;
      $record['data'] = array();
      $record['cookie'] = NULL;
    }
    drupal_write_record('djambi_users', $record, array('djuid'));
  }
}

/**
 * Mise à jour du ping et de l'IP d'un utilisateur
 */
function _kw_djambi_update_user_infos($user_data, $djuid, $join = FALSE) {
  $user_data['ip'] = $_SERVER['REMOTE_ADDR'];
  $user_data['ping'] = time();
  $unstored_keys = array('djuid', 'cookie', 'status', 'ranking', 'uid');
  foreach ($user_data as $key => $value) {
    if (in_array($key, $unstored_keys)) {
      unset($user_data[$key]);
    }
  }
  $record = array(
      'data' => $user_data,
      'djuid' => $djuid
  );
  if ($join) {
    global $user;
    $record['uid'] = $user->uid;
    $record['cookie'] = _kw_djambi_cookie();
  }
  drupal_write_record('djambi_users', $record, array('djuid'));
  return $user_data;
}

/**
 * Création du label d'une pièce
 * @param DjambiPiece $piece
 */
function _kw_djambi_get_full_piece_name(DjambiPiece $piece) {
  return t("!color !longname", array(
    "!color" => _kw_djambi_get_translatable_messages($piece->getFaction()->getName()),
    "!longname" => _kw_djambi_get_translatable_messages($piece->getLongname())
  ));
}

/**
 * Fixe le temps de conservation d'une partie
 * @param String $mode
 */
function _kw_djambi_autodelete_time($mode = 'std') {
  if ($mode == 'no_autodelete') {
    return 0;
  }
  if ($mode == 'extended') {
    return time() + 60 * 60 * 24 * 365;
  }
  else {
    return time() + 60 * 60 * 24;
  }
}

/**
 * Génère un message de description d'un mouvement à partir des données enregistrées
 *   dans la base.
 */
function _kw_djambi_describe_move($move, $grid) {
  $msg = NULL;
  $piece = $grid->getPieceById($move["target"]);
  if ($move["type"] == "move") {
    $faction = $grid->getFactionById($move["target_faction"]);
    $msg = t("!faction has moved !piece from !origin to !destination.", array(
        "!faction" => "<span class='faction " . $faction->getClass() . "'>" . $faction->getName("t") . "</span>",
        "!piece" =>  "<span class='piece " . $piece->getType() . "'>" . _kw_djambi_get_full_piece_name($piece) . "</span>",
        "!origin" => $move["from"],
        "!destination" => $move["to"]
    ));
  }
  elseif ($move["type"] == "murder") {
    $victim = $piece;
    $responsable = $grid->getPieceById($move["acting"]);
    $msg = t("!victim has been killed by !piece. The crime took place in !origin, and the victim body was found in !destination.", array(
        "!victim" => "<span class='piece " . $victim->getType() . "'>" . _kw_djambi_get_full_piece_name($victim) . "</span>",
        "!piece" =>  "<span class='piece " . $responsable->getType() . "'>" . _kw_djambi_get_full_piece_name($responsable) . "</span>",
        "!origin" => $move["from"],
        "!destination" => $move["to"]
    ));
  }
  elseif ($move["type"] == "necromobility") {
    $responsable = $grid->getPieceById($move["acting"]);
    $msg = t("!piece has exhumed a dead body from !origin. Its new burial place is located in !destination.", array(
        "!piece" =>  "<span class='piece " . $responsable->getType() . "'>" . _kw_djambi_get_full_piece_name($responsable) . "</span>",
        "!origin" => $move["from"],
        "!destination" => $move["to"]
    ));
  }
  elseif ($move["type"] == "manipulation") {
    $victim = $piece;
    $responsable = $grid->getPieceById($move["acting"]);
    $msg = t("!victim has been manipulated by !piece from !origin to !destination.", array(
        "!victim" => "<span class='piece " . $victim->getType() . "'>" . _kw_djambi_get_full_piece_name($victim) . "</span>",
        "!piece" =>  "<span class='piece " . $responsable->getType() . "'>" . _kw_djambi_get_full_piece_name($responsable) . "</span>",
        "!origin" => $move["from"],
        "!destination" => $move["to"]
    ));
  }
  elseif ($move['type'] == 'elimination') {
    $victim = $piece;
    $msg = t("!victim has been eliminated from the game. The action took place in !origin.", array(
        "!victim" => "<span class='piece " . $victim->getType() . "'>" . _kw_djambi_get_full_piece_name($victim) . "</span>",
        "!origin" => $move["from"],
    ));
  }
  return $msg;
}

/**
 * Génère un message de description des événements à partir des données
 *   enregistrées dans la base.
 */
function _kw_djambi_describe_event($event, DjambiBattlefield $grid) {
  $args = array();
  if (is_array($event["args"])) {
    foreach ($event["args"] as $key => $arg) {
      if (substr($key, 0, 2) == "!!") {
        $arg = _kw_djambi_get_translatable_messages($arg);
      }
      $args[$key] = $arg;
    }
  }
  return _kw_djambi_get_translatable_messages($event["event"], $args, $grid);
}

/**
 * Vérifie si la faction passée en argument est contrôlée par l'utilisateur courant.
 */
function _kw_djambi_check_current_user(DjambiPoliticalFaction $faction, $control = TRUE) {
  global $user;
  if ($control) {
    $user_data = $faction->getControl()->getUserData();
  }
  else {
    $user_data = $faction->getUserData();
  }
  if ($user->uid > 0) {
    if ($user_data['uid'] == $user->uid) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
  else {
    $cookie = _kw_djambi_cookie();
    if (!empty($cookie) && $user_data['cookie'] == $cookie) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
}

/**
 * Formulaire créant une grille de Djambi
*/
function kw_djambi_game_form($form, &$form_state, $node) {
  // Chargement de la grille
  if (!empty($form_state['kw_djambi']['selected_piece']) && !$form_state['kw_djambi']['change_turn']) {
    $piece = $form_state['kw_djambi']['selected_piece'];
    $grid = $piece->getFaction()->getBattlefield();
  }
  else {
    $grid = _kw_djambi_load_game($node);
    if (isset($form_state['kw_djambi']['change_turn'])) {
      unset($form_state['kw_djambi']);
    }
  }
  module_load_include('inc', 'kw_djambi', 'kw_djambi.form');
  $form = _kw_djambi_build_game_form($form, $form_state, $grid);
  return $form;
}

/**
 * Validation des actions sur la grille de jeu
 */
function kw_djambi_game_form_validate($form, &$form_state) {
  module_load_include('inc', 'kw_djambi', 'kw_djambi.form');
  /* @var $grid DjambiBattlefield */
  $grid = $form["#grid"];
  $errors = array();
  $button = $form_state["triggering_element"];
  $type_button = isset($button["#array_parents"][1]) ? $button["#array_parents"][1] : NULL;
  if ($type_button == "movable") {
    $piece = kw_djambi_piece_selection_validate($errors, $button["#return_value"], $grid);
    if ($piece && isset($form_state["kw_djambi"]["selected_piece"])) {
      $selected_piece = $form_state["kw_djambi"]["selected_piece"];
      if ($piece->getId() == $selected_piece->getId()) {
        $piece = FALSE;
        unset($form_state["kw_djambi"]["selected_piece"]);
        $form_state["kw_djambi"]["phase"] = "piece_selection";
      }
    }
    if ($piece) {
      $form_state["kw_djambi"]["phase"] = "piece_destination";
      $form_state["kw_djambi"]["selected_piece"] = $piece;
      if (!empty($form_state["input"]["piece_destination"])) {
        $destination = kw_djambi_piece_destination_validate($errors, $piece, $form_state["input"]["piece_destination"], NULL);
        if ($destination) {
          $form_state["kw_djambi"]["phase"] = "move_result";
          $form_state["kw_djambi"]["selected_destination"] = $form_state["input"]["piece_destination"];
        }
      }
    }
  }
  elseif ($type_button == "destination" && isset($form_state["kw_djambi"]["selected_piece"])) {
    $piece = $form_state["kw_djambi"]["selected_piece"];
    $destination = kw_djambi_piece_destination_validate($errors, $piece, $button["#return_value"], $button["#name"]);
    if ($destination) {
      $form_state["kw_djambi"]["phase"] = "move_result";
      $form_state["kw_djambi"]["selected_destination"] = $button["#return_value"];
    }
  }
  elseif (isset($form_state["kw_djambi"]["interactions"])) {
    $current_interaction = current($form_state["kw_djambi"]["interactions"]);
    $selected_piece = $form_state["kw_djambi"]["selected_piece"];
    if ($current_interaction["type"] == "murder" && $type_button == $current_interaction["type"]) {
      $victim_piece = $current_interaction["target"];
      $death = kw_djambi_piece_murder_validate($errors, $grid, $selected_piece, $victim_piece, $button["#return_value"], $button["#name"]);
      if ($death) {
        $form_state["kw_djambi"]["phase"] = "interaction_result";
        $form_state["kw_djambi"]["selected_interaction"] = $button["#return_value"];
      }
    }
    elseif ($current_interaction["type"] == "necromobility" && $type_button == $current_interaction["type"]) {
      $manipulated_piece = $current_interaction["target"];
      $manipulation = kw_djambi_piece_necromobility_validate($errors, $grid, $manipulated_piece, $button["#return_value"], $button["#name"]);
      if ($manipulation) {
        $form_state["kw_djambi"]["phase"] = "interaction_result";
        $form_state["kw_djambi"]["selected_interaction"] = $button["#return_value"];
      }
    }
    elseif ($current_interaction["type"] == "manipulation" && $type_button == $current_interaction["type"]) {
      $manipulated_piece = $current_interaction["target"];
      $manipulation = kw_djambi_piece_manipulation_validate($errors, $grid, $selected_piece, $manipulated_piece, $button["#return_value"], $button["#name"]);
      if ($manipulation) {
        $form_state["kw_djambi"]["phase"] = "interaction_result";
        $form_state["kw_djambi"]["selected_interaction"] = $button["#return_value"];
      }
    }
    elseif ($current_interaction["type"] == "reportage" && $type_button == $current_interaction["type"]) {
      $reporter = $form_state["kw_djambi"]["selected_piece"];
      $reportage = kw_djambi_piece_reportage_validate($errors, $grid, $reporter, $button["#return_value"], $button["#name"]);
      if ($reportage) {
        $form_state["kw_djambi"]["phase"] = "interaction_result";
        $form_state["kw_djambi"]["selected_interaction"] = $button["#return_value"];
      }
    }
    elseif ($current_interaction["type"] == "throne_evacuation" && $type_button == $current_interaction["type"]) {
      $evacuation = kw_djambi_piece_evacuation_validate($errors, $grid, $selected_piece, $button["#return_value"], $button["#name"]);
      if ($evacuation) {
        $form_state["kw_djambi"]["phase"] = "interaction_result";
        $form_state["kw_djambi"]["selected_interaction"] = $button["#return_value"];
      }
    }
  }
  if (!empty($errors)) {
    foreach ($errors as $error) {
      form_set_error($error["location"], $error["msg"]);
    }
  }
}

/**
 * Traduction des chaînes de caractères présentes dans les classes du dossier lib
 */
function _kw_djambi_get_translatable_messages($message, $args = array(), DjambiBattlefield $grid = NULL) {
  if (isset($args['faction1']) && !is_null($grid)) {
    $faction1 = $grid->getFactionById($args['faction1']);
    $args['!faction1'] = '<span class="faction ' . $faction1->getClass() . '">' . $faction1->getName() . '</span>';
    unset($args['faction1']);
  }
  if (isset($args['faction2']) && !is_null($grid)) {
    $faction2 = $grid->getFactionById($args['faction2']);
    $args['!faction2'] = '<span class="faction ' . $faction2->getClass() . '">' . $faction2->getName() . '</span>';
    unset($args['faction2']);
  }
  if (isset($args['piece']) && !is_null($grid)) {
    $piece = $grid->getPieceById($args['piece']);
    $args['!piece'] = '<span class="piece ' . $piece->getType() . '">' . _kw_djambi_get_full_piece_name($piece) . '</span>';
    unset($args['piece']);
  }
  if (isset($args['!user_id']) && isset($args['!user_ip'])) {
    $user = user_load($args['!user_id']);
    $username = theme('username', array('account' => $user));
    if ($user->uid == 0) {
      $username .= ' (' . $args['!user_ip'] . ')';
    }
    $args['!user'] = $username;
  }
  switch($message) {
    case("THRONE_ACCESS"):
      $txt = t("!piece is now the great and beloved ruler of the djambi world.", $args);
      break;
    case("THRONE_RETREAT"):
      $txt = t("!piece's reign of despotism and terror is now over.", $args);
      break;
    case("THRONE_EVACUATION"):
      $txt= t("!piece body has been exhumed from his mausoleum.", $args);
      break;
    case("THRONE_MURDER"):
      $txt= t("!piece has been killed during his reign !", $args);
      break;
    case("THRONE_MAUSOLEUM"):
      $txt= t("!piece body has been placed in the throne case mausoleum. Let's worship his memory.", $args);
      break;
    case('DIPLOMAT_GOLDEN_MOVE'):
      $txt = t("!piece has just achieved a diplomat golden move !", $args);
      break;
    case('ASSASSIN_GOLDEN_MOVE'):
      $txt = t("!piece has just achieved an assassin golden move !", $args);
      break;
    case("NEW_DJAMBI_GAME"):
      $txt = t("New djambi chess game created.");
      break;
    case("SURROUNDED"):
      $txt = t("!faction1 leader is surrounded by dead pieces and cannot access to power anymore.", $args);
      break;
    case("END"):
      $txt = t("End of the game !");
      break;
    case("DRAW"):
      $txt = t("This is a draw.");
      break;
    case("THE_WINNER_IS"):
      $txt = t("!faction1 wins !!!", $args);
      break;
    case("TURN_BEGIN"):
      $txt = t("!faction1 turn begins.", $args);
      break;
    case("NEW_TURN"):
      $txt = t("Turn !turn begins.", $args);
      break;
    case("SKIPPED_TURN"):
      $txt = t("!faction1 skipps his turn.", $args);
      break;
    case(KW_DJAMBI_MODE_SANDBOX):
      $txt = t("Sandbox game");
      break;
    case(KW_DJAMBI_MODE_FRIENDLY):
      $txt = t("Friendly game");
      break;
    case(KW_DJAMBI_STATUS_RECRUITING):
      $txt = t("Waiting for new players...");
      break;
    case('STATUS_RECRUITING_DESCRIPTION'):
      $txt = t("recruiting");
      break;
    case(KW_DJAMBI_STATUS_PENDING):
      $txt = t("Game in progress...");
      break;
    case('STATUS_PENDING_DESCRIPTION'):
      $txt = t("pending");
      break;
    case(KW_DJAMBI_STATUS_FINISHED):
      $txt = t("Game over !");
      break;
    case('STATUS_FINISHED_DESCRIPTION'):
      $txt = t("finished");
      break;
    case(KW_DJAMBI_STATUS_DRAW_PROPOSAL):
      $txt = t("Peace negociation...");
      break;
    case('STATUS_DRAW_PROPOSAL_DESCRIPTION'):
      $txt = t("negociating");
      break;
    case("Sniper"):
      $txt = t("Sniper");
      break;
    case("Leader"):
      $txt = t("Leader");
      break;
    case("Necromobil"):
      $txt = t("Necromobil");
      break;
    case("Diplomat"):
      $txt = t("Diplomat");
      break;
    case("Reporter"):
      $txt = t("Reporter");
      break;
    case("Leader"):
      $txt = t("Leader");
      break;
    case("Militant #1"):
      $txt = t("Militant #1");
      break;
    case("Militant #2"):
      $txt = t("Militant #2");
      break;
    case("Militant #3"):
      $txt = t("Militant #3");
      break;
    case("CHANGING_SIDE"):
      $txt = t("The desperate remaining !faction1 side's partisans are now joining the !faction2 side !", $args);
      break;
    case("INDEPENDANT_SIDE"):
      $txt = t("The desperate remaining !faction1 side's partisans are no longing supporting the !faction2 side.", $args);
      break;
    case("GAME_OVER"):
      $txt = t("Game over for !faction1 side !", $args);
      break;
    case("WITHDRAWAL"):
      $txt = t("The hopeless !faction1 leader decided to withdraw from the game. Shame on him.
        His remaining pieces stay neutrally in the board, waiting for a better cause to support.", $args);
      break;
    case("Red"):
      $txt = t("Red");
      break;
    case("Blue"):
      $txt = t("Blue");
      break;
    case("Yellow"):
      $txt = t("Yellow");
      break;
    case("Green"):
      $txt = t("Green");
      break;
    case("DRAW_PROPOSAL"):
      $txt = t("The !faction1 side has called for a draw.", $args);
      break;
    case("DRAW_ACCEPTED"):
      $txt = t("The !faction1 side accepted the draw proposal.", $args);
      break;
    case("DRAW_REJECTED"):
      $txt = t("The !faction1 side rejected the draw proposal.", $args);
      break;
    case("MODE_SANDBOX_DESCRIPTION"):
      $txt = t('Sandbox game - you control successively all sides of the game. '
        . 'Useful to discover the Djambi rules, to test alone new strategies, '
        . ' or to play with other people on the same screen.');
      break;
    case("MODE_FRIENDLY_DESCRIPTION"):
      $txt = t('Friendly game - play online Djambi games with unknown human players, just for fun.');
      break;
    case("4STD_DESCRIPTION"):
      $txt = t("4 players, on a standard (9x9) square grid");
      break;
    case("2STD_DESCRIPTION"):
      $txt = t("2 players, on a standard (9x9) square grid. Each side controls an additional vassalized faction.");
      break;
    case("3HEX_DESCRIPTION"):
      $txt = t("3 players, on a hexagonal grid");
      break;
    case("COMEBACK_AFTER_SURROUND"):
      $txt = t("The !faction1 leader is not surrounded anymore by dead pieces. It's a come back for !faction1 side !", $args);
      break;
    case("COMEBACK_AFTER_WITHDRAW"):
      $txt = t("The !faction1 side got some new hope and is back in the game.", $args);
      break;
    case("RULE1"):
        $txt = t("Leader surrounding rule");
    break;
    case("RULE3"):
        $txt = t("Team vassalization rule");
    break;
    case("RULE2"):
        $txt = t("Come-back possibilities rule");
    break;
    case("RULE4"):
        $txt = t("Canibalism rule");
    break;
    case("RULE5"):
        $txt = t("Self manipulation rule");
    break;
    case("RULE6"):
        $txt = t("Press liberty rule");
    break;
    case("RULE7"):
      $txt = t("Throne case interactions rule");
      break;
    case("RULE1_STRICT"):
      $txt = t('A leader is eliminated if he is not occupying the throne case, '
                  . 'if he or his controlled adjacent pieces are surrounded by dead peaces (without empty cells) '
                  . 'even if he is still controlling a living necromobile.');
    break;
    case("RULE1_LOOSE"):
      $txt = t('A leader is eliminated if he is not occupying the throne case, '
                  . 'if he or his controlled adjacent pieces cannot move due to dead pieces barricade '
                  . 'and if he is not controlling a living necromobile.');
    break;
    case("RULE1_THRONE_ACCESS"):
      $txt = t('A leader is eliminated if the way to throne case is locked by dead pieces (even if he can still move)'
                  . ' and if he has no living necromobile among his controlled pieces.');
    break;
    case("RULE3_TEMPORARY"):
      $txt = t('A player who acceeds to power gains control of the withdrawn or surrounded leaders sides just during the time of his reign.');
    break;
    case("RULE3_FULL_CONTROL"):
      $txt = t('A player who acceeds to power gains full control of the withdrawn or surrounded leaders sides until the end of the game,'
                  .' even if he leaves the throne case.');
    break;
    case("RULE2_NEVER"):
      $txt = t('No come-back.');
    break;
    case("RULE2_SURROUNDING"):
      $txt = t('A player who had a surrounded leader can play again if his leader is not surrounded anymore, even if he is controlled by another team.');
    break;
    case("RULE2_ALLOWED"):
      $txt = t('A player who had withdrawn or had a surrounded leader can play again if his leader is still alive, not surrounded and not controlled by an another team.');
    break;
    case("RULE4_YES"):
      $txt = t('The end justifies the means. If needed, there will be sacrifices. They will remain in our memories.');
    break;
    case("RULE4_NO"):
      $txt = t('No way, killing your own pieces is forbidden.');
    break;
    case("RULE4_ETHICAL"):
      $txt = t('Responsible game : you cannot kill your own pieces and neutral pieces.');
      break;
    case("RULE4_VASSALS"):
      $txt = t('Killing vassalized pieces may be possible.');
    break;
    case("RULE5_NEVER"):
      $txt = t('Your diplomats are never allowed to manipulate pieces that you are controlling.');
    break;
    case("RULE5_VASSAL"):
      $txt = t('Your diplomat can manipulate vassalized pieces.');
    break;
    case("RULE6_PRAVDA"):
      $txt = t('Pradva style reporters : your reporters will never involve your own pieces in their scoops, '
                  . 'but they can eliminate one ennemy per move.');
    break;
    case("RULE6_FOXNEWS"):
      $txt = t('Fox News style reporters : your reporters can involve several pieces in their moves, '
                  . 'but some scandals can also concern your own troups.');
    break;
    case("RULE7_NORMAL"):
      $txt = t("Standard rules");
      break;
    case("RULE7_EXTENDED"):
      $txt = t("Extended rules : dead leaders can access to power posthumously, allow assassins and diplomats master moves.");
      break;
    case("OPTION2"):
       $txt = t("Turns before each draw proposal availability");
    break;
    case("OPTION2_NEVER"):
       $txt = t("No draw !");
    break;
    case("OPTION2_ALWAYS"):
       $txt = t("Unlimited draw proposal");
    break;
    case("OPTION1_XTIME"):
       $txt = format_plural($args['!value'], '!value time', '!value times', $args);
    break;
    case("OPTION1"):
       $txt = t("Allowed skipped turns per user before elimination");
    break;
    case("OPTION1_NEVER"):
       $txt = t("Skipping turns is forbidden !");
    break;
    case("OPTION1_ALWAYS"):
       $txt = t("No limits, you can always skip your turn.");
    break;
    case("OPTION2_XTURN"):
       $txt = format_plural($args['!value'], '!value turn', '!value turns', $args);
    break;
    case(KW_DJAMBI_USER_PLAYING):
      $txt = t('playing');
    break;
    case(KW_DJAMBI_USER_WINNER):
      $txt = t('winner');
    break;
    case(KW_DJAMBI_USER_DRAW):
      $txt = t('draw');
    break;
    case(KW_DJAMBI_USER_KILLED):
      $txt = t('killed');
    break;
    case(KW_DJAMBI_USER_WITHDRAW):
      $txt = t('withdrawn');
    break;
    case(KW_DJAMBI_USER_SURROUNDED):
      $txt = t('surrounded');
    break;
    case(KW_DJAMBI_USER_DEFECT):
      $txt = t('defect');
    break;
    case(KW_DJAMBI_USER_EMPTY_SLOT):
      $txt = t('empty');
    break;
    case(KW_DJAMBI_USER_READY):
      $txt = t('ready');
    break;
    case(KW_DJAMBI_USER_VASSALIZED):
      $txt = t('vassalized');
    break;
    case('NEW_TEAM');
      $txt = t('!faction1 side is now controlled by !user', $args);
    break;
    case('TEAM_EXIT'):
      $txt = t('!user left the game.', $args);
    break;
      /*case(""):
       $txt = t("");
      break;*/
    default:
      $txt = $message;
  }
  return $txt;
}