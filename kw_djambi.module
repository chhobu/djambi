<?php
// $Id$
/**
 * Implements hook_permission().
 */
function kw_djambi_permission() {
  return array(
    'administer djambi games' => array(
      'title' => t('Administer djambi games'),
      'description' => t('Perform administrative tasks dealing with djambi games.')
    )
  );
}

/**
 * Implements hook_theme().
 */
function kw_djambi_theme() {
  return array(
    'djambi_grid' => array(
        'render element' => 'form',
        'file' => 'kw_djambi.theme.inc'
     ),
  );
}

/**
 * Implements hook_cron().
 */
function kw_djambi_cron() {
  $q = db_select('djambi_node', 'dj');
  $q->fields('dj', array('nid'));
  $q->condition('dj.autodelete', time(), '<');
  $q->condition('dj.autodelete', 0, '!=');
  $nids = $q->execute()->fetchCol('nid');
  if (!empty($nids)) {
    node_delete_multiple($nids);
  }
}

/**
 * Implements hook_node_info().
 */
function kw_djambi_node_info() {
  // Création d'un nouveau type de contenu "partie de Djambi".
  return array(
    "kw_djambi" => array(
      "name" => t("Djambi game"),
      "base" => "node_content",
      "description" => t("Create a new machiavelli chess game."),
      "has_title" => TRUE
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function kw_djambi_form_kw_djambi_node_form_alter(&$form, &$form_state) {
  if (!$form["nid"]["#value"]) {
    $form['actions']['submit']['#value'] = t('Begin game');
    $form['basics'] = array(
        '#type' => 'fieldset',
        '#title' => t('Game presets')
    );
    $nb_players_options = DjambiBattlefield::getAvailbaleNumberPlayers();
    foreach ($nb_players_options as $option => $description) {
      $nb_players_options[$option] = _kw_djambi_get_translatable_messages($description);
    }
    $form['basics']['nb_players'] = array(
        '#type' => 'radios',
        '#title' => t('Number of players'),
        '#default_value' => '4std',
        '#options' => $nb_players_options
    );
    $mode_options = DjambiBattlefield::getModes(TRUE);
    foreach ($mode_options as $option => $description) {
      $mode_options[$option] = _kw_djambi_get_translatable_messages($description);
    }
    $form['basics']['mode'] = array(
        '#type' => 'radios',
        '#title' => t('Game mode'),
        '#default_value' => KW_DJAMBI_MODE_SANDBOX,
        '#options' => $mode_options
    );
    $form['advanced'] = array(
        '#type' => 'fieldset',
        '#title' => t('Advanced options'),
        '#tree' => TRUE,
        '#collapsible' => TRUE,
        '#collapsed' => TRUE
    );
    $defaults = DjambiBattlefield::getDefaultOptions();
    $form['advanced']['rule_surrounding'] = array(
        '#type' => 'radios',
        '#title' => t('Leader surrounding rule'),
        '#default_value' => $defaults['rule_surrounding'],
        '#options' => array(
            'strict' => t('A leader is eliminated if he is not occupying the throne case, '
                . 'if he or his controlled adjacent pieces are surrounded by dead peaces (without empty cells) '
                . 'even if he is still controlling a living necromobile.'),
            'loose' => t('A leader is eliminated if he is not occupying the throne case, '
                . 'if he or his controlled adjacent pieces cannot move due to dead pieces barricade '
                . 'and if he is not controlling a living necromobile.'),
            'throne_access' => t('A leader is eliminated if the way to throne case is locked by dead pieces (even if he can still move)'
                . ' and if he has no living necromobile among his controlled pieces.')
        )
    );
    $form['advanced']['rule_vassalization'] = array(
        '#type' => 'radios',
        '#title' => t('Team vassalization rule'),
        '#default_value' => $defaults['rule_vassalization'],
        '#options' => array(
            'full_control' => t('A player who acceeds to power gains full control of the withdrawn or surrounded leaders sides until the end of the game,'
                .' even if he leaves the throne case.'),
            'temporary' => t('A player who acceeds to power gains control of the withdrawn or surrounded leaders sides just during the time of his reign.')
        )
    );
    $form['advanced']['rule_comeback'] = array(
        '#type' => 'radios',
        '#title' => t('Come-back possibilities rule'),
        '#default_value' => $defaults['rule_comeback'],
        '#options' => array(
            'never' => t('No come-back.'),
            'surrounding' => t('A player who had a surrounded leader can play again if his leader is not surrounded anymore, even if he is controlled by another team.'),
            'allowed' => t('A player who had withdrawn or had a surrounded leader can play again if his leader is still alive, not surrounded and not controlled by an another team.')
         )
    );
    $form['advanced']['turns_before_draw_proposal'] = array(
        '#type' => 'select',
        '#title' => t('Turns before each draw proposal avalaibility'),
        '#default_value' => $defaults['turns_before_draw_proposal'],
        '#options' => array(
            -1 => t('No draw !'),
            0 => t('Unlimited draw proposal'),
            2 => t('2 turns'),
            5 => t('5 turns'),
            10 => t('10 turns'),
            20 => t('20 turns')
         ),
    );
    $form['advanced']['allowed_skipped_turns_per_user'] = array(
        '#type' => 'select',
        '#title' => t('Allowed skipped turns per user before elimination'),
        '#default_value' => $defaults['allowed_skipped_turns_per_user'],
        '#options' => array(
            0 => t('Skipping turns is forbidden !'),
            1 => t('1 time'),
            2 => t('2 times'),
            3 => t('3 times'),
            4 => t('4 times'),
            5 => t('5 times'),
            10 => t('10 times'),
            -1 => t('No limits, you can always skip your turn.'),
        ),
    );
    $form['#submit'] = array('kw_djambi_new_game_submit');
  }
  else {
    $node = $form["#node"];
    $grid = kw_djambi_load_game($node);
    if (user_access('administer djambi games')) {
      if ($grid->getMode() == KW_DJAMBI_MODE_SANDBOX) {
        $form['djambi_mode'] = array(
            '#type' => 'value',
            '#value' => $grid->getMode()
        );
        $form['no_autodelete'] = array(
            '#type' => 'checkbox',
            '#title' => t('Do not autodelete this game'),
            '#description' => t('Finished or inactive games are automatically removed after an amount of time.'
                .' Check this box to keep this game alive.'),
            '#default_value' => $grid->getInfo('autodelete') == 0 ? 1 : 0,
            '#return_value' => 1
        );
        $form['#submit'][] = 'kw_djambi_node_form_extra_submit';
      }
    }
  }
}

/**
 * Création d'une nouvelle partie
 * @param String $mode
 */
function kw_djambi_new_game_submit($form, &$form_state) {
  global $user;
  $node = $form['#node'];
  $game_id = variable_get('kw_djambi_game_sequence', 0);
  $game_id++;
  $node->title = t("Machiavelli chess - Game #!i", array("!i" => $game_id));
  $mode = $form_state["values"]["mode"];
  // -------------------------------------------------------
  // -------- Sélection du mode jeu SANDBOX ----------------
  // -------------------------------------------------------
  if ($mode == KW_DJAMBI_MODE_SANDBOX) {
    // Création d'un cookie si l'utilisateur est anonyme
    if($user->uid == 0) {
      if (empty($_COOKIE['Drupal_visitor_djambi_cookie_id'])) {
        $cookie = uniqid();
        user_cookie_save(array('djambi_cookie_id' => $cookie));
      }
      else {
        $cookie = $_COOKIE['Drupal_visitor_djambi_cookie_id'];
      }
    }
    else {
      $cookie = NULL;
    }
    // Recherche d'une partie en cours pour l'utilisateur courant
    $q = db_select("djambi_users", "u");
    $q->join("djambi_node", "n", "n.nid = u.nid");
    $q->join("node", "n2", "n.nid = n2.nid");
    $q->fields("n", array("nid"));
    $q->fields("n2", array("created"));
    $q->condition("n.status", KW_DJAMBI_STATUS_PENDING);
    $q->condition("n.mode", KW_DJAMBI_MODE_SANDBOX);
    $q->condition("u.uid", $user->uid);
    if ($user->uid == 0 && !is_null($cookie)) {
      $q->condition('u.cookie', $cookie);
    }
    $results = $q->execute()->fetchAll();
    // Si partie en cours : redirection
    if ($results) {
      $result = current($results);
      drupal_set_message(t("You already have begun a sandbox game on !date. "
          . "This game does not seem to be finished : "
          . " switching back to the last played move of the game.",
          array("!date" => format_date($result->created))));
      drupal_goto("node/" . $result->nid);
    }
    $node->dj_players = 4;
    $node->dj_mode = $mode;
    $node->dj_status = KW_DJAMBI_STATUS_PENDING;
    $node->dj_begin = time();
    $node->dj_delete = _kw_djambi_autodelete_time($mode);
    $node->dj_users = array_fill(1, $node->dj_players, array(
        'uid' => $user->uid,
        'data' => array('ip' => $_SERVER['REMOTE_ADDR']),
        'status' => KW_DJAMBI_USER_READY,
        'cookie' => $cookie
    ));
  }
  // -------------------------------------------------------
  // ------------------ Traitements communs ----------------
  // -------------------------------------------------------
  $factions_data = DjambiPoliticalFaction::buildFactionsInfos();
  $factions = array();
  $i = 0;
  foreach($factions_data as $key => $faction_data) {
    $i++;
    if ($i > $node->dj_players) {
      break;
    }
    $factions[] = new DjambiPoliticalFaction($node->dj_users[$i], $key,
        $faction_data);
  }
  $grid = new DjambiBattlefield(0, TRUE, array('factions' => $factions));
  foreach ($form_state['values']['advanced'] as $option => $value) {
    $grid->setOption($option, $value);
  }
  $node->dj_data = serialize($grid->toDatabase());
  $node->dj_prepared = TRUE;
  $node->dj_battlefield = $grid;
  variable_set('kw_djambi_game_sequence', $game_id);
}

function kw_djambi_node_form_extra_submit($form, &$form_state) {
  if (user_access('administer djambi games') && isset($form_state['values']['no_autodelete'])) {
    $q = db_update('djambi_node')
    -> fields(array('autodelete' => $form_state['values']['no_autodelete'] == 1 ? 0 :
        _kw_djambi_autodelete_time($form['djambi_mode']['#value'])))
    -> condition('nid', $form['#node']->nid)
    -> execute();
  }
}

/**
 * Implements hook_insert().
 */
function kw_djambi_node_insert($node) {
  if ($node->type == 'kw_djambi' && isset($node->dj_prepared) && $node->dj_prepared) {
    /* @var $battlefield DjambiBattlefield  */
    $battlefield = $node->dj_battlefield;
    db_insert('djambi_node')->fields(array(
      'nid' => $node->nid,
      'mode' => $node->dj_mode,
      'points' => 0,
      'status' => $node->dj_status,
      'nb_moves' => 0,
      'data' => $node->dj_data,
      'begin' => $node->dj_begin,
      'changed' => $node->dj_begin,
      'autodelete' => $node->dj_delete,
      'compressed' => 0
    ))->execute();
    $factions = $battlefield->getFactions();
    /* @var $faction DjambiPoliticalFaction */
    foreach ($factions as $key => $faction) {
      $user = current($node->dj_users);
      db_insert('djambi_users')->fields(array(
        'nid' => $node->nid,
        'uid' => $user['uid'],
        'status' => $user['status'],
        'faction' => $faction->getId(),
        'data' => $user['data'],
        'cookie' => $user['cookie']
      ))->execute();
      if (next($node->dj_users) === FALSE) {
        break;
      }
    }
  }
}

/**
 * Implements hook_delete().
 */
function kw_djambi_node_delete($node) {
  db_delete("djambi_users")->condition("nid", $node->nid)->execute();
  db_delete("djambi_node")->condition("nid", $node->nid)->execute();
}

/**
 * Implements hook_node_view().
 */
function kw_djambi_node_view($node, $view_mode) {
  if ($node->type == "kw_djambi" && $view_mode =="full") {
    $node->content["grid"] = drupal_get_form("kw_djambi_game_form", $node);
  }
}

/**
 * Chargement des données concernant la partie en cours.
 * @param object $node : node de type kw_djambi
 * @return DjambiBattlefield
 */
function kw_djambi_load_game($node) {
  $query = db_select("djambi_node", "dj")
      ->fields("dj", array("nid", "data", "status", "mode", "compressed", "autodelete"))
      ->condition("dj.nid", $node->nid);
  $result = $query->execute()->fetchAssoc();
  $query = db_select("djambi_users", "dju")
    ->fields("dju", array("djuid", "uid", "faction", "cookie", "status", "ranking"))
    ->condition("dju.nid", $node->nid);
  $users_result = $query->execute()->fetchAll();
  $users = array();
  foreach($users_result as $key => $user) {
    $users[$user->faction] = array(
        'djuid' => $user->djuid,
        'uid' => $user->uid,
        'cookie' => $user->cookie,
        'status' => $user->status,
        'ranking' => $user->ranking
    );
  }
  $data = $result['data'];
  if ($result['compressed']) {
    $data = gzuncompress($data);
  }
  $data = unserialize($data);
  $data["users"] = $users;
  $battlefield = new DjambiBattlefield($result["nid"], FALSE, $data);
  $battlefield->setMode($result["mode"]);
  $battlefield->setStatus($result["status"]);
  $battlefield->setInfo('autodelete', $result['autodelete']);
  $battlefield->play();
  return $battlefield;
}

/**
 * Implements hook_preprocess_page().
 * Ajoute un texte alternatif sur le logo
 * @param array $variables
 */
function kw_djambi_preprocess_page(&$variables) {
  $variables["logo_alt"] = t("The strategy game advised to traitors and bastards.");
}

/**
 * Formulaire créant une grille de Djambi
 */
function kw_djambi_game_form($form, &$form_state, $node) {
  global $user;
  // Chargement de la grille
  if (!empty($form_state['kw_djambi']['selected_piece']) && !$form_state['kw_djambi']['change_turn']) {
    $piece = $form_state['kw_djambi']['selected_piece'];
    $form['#grid'] = $piece->getFaction()->getBattlefield();
    $grid = $form['#grid'];
  }
  else {
    $grid = kw_djambi_load_game($node);
    $form['#grid'] = $grid;
    if (isset($form_state['kw_djambi']['change_turn'])) {
      unset($form_state['kw_djambi']);
    }
  }
  // Inclusion du Javascript et du CSS
  if ($grid->getStatus() != KW_DJAMBI_STATUS_FINISHED) {
    drupal_add_library('system', 'ui.core');
    drupal_add_library('system', 'ui.widget');
    drupal_add_library('system', 'ui.mouse');
    drupal_add_library('system', 'ui.draggable');
    drupal_add_library('system', 'ui.droppable');
  }
  $form['#attached']['css'][] = drupal_get_path('module', 'kw_djambi').'/kw_djambi.css';
  $form['#attached']['js'][] = drupal_get_path('module', 'kw_djambi').'/js/kw_djambi.js';
  // Délégation de l'affichage
  $form['#theme'] = array('djambi_grid');
  // Création de l'ossature du formulaire
  $form['#prefix'] = '<div id="GridDiv' . $grid->getId() . '">';
  $form['#suffix'] = '</div>';
  $form['grid'] = array(
    '#type' => 'fieldset',
    '#title' => t('Djambi grid'),
    '#weight' => 0
  );
  $form['stats'] = array(
    '#type' => 'fieldset',
    '#title' => $grid->getStatus() == KW_DJAMBI_STATUS_FINISHED ? t('Stats and awards') : t('Stats'),
    '#weight' => 5
  );
  $form['log'] = array(
    '#type' => 'fieldset',
    '#title' => t('Treachery log'),
    '#weight' => 10,
    '#collapsible' => $grid->getStatus() == KW_DJAMBI_STATUS_FINISHED ? TRUE : FALSE,
    '#collapsed' => $grid->getStatus() == KW_DJAMBI_STATUS_FINISHED ? TRUE : FALSE
  );
  $ajax_settings = array(
    'callback' => 'kw_djambi_ajax_callback',
    'wrapper' => 'GridDiv' . $grid->getId(),
    'effect' => 'none',
    'method' => 'replace',
  );
  // Ajout des interactions concernant le joueur actif
  $phase_text = NULL;
  $faction = $grid->getPlayingFaction();
  // Interface de réponse sur proposition de partie nulle
  if ($faction && $grid->getStatus() == KW_DJAMBI_STATUS_DRAW_PROPOSAL) {
    $form['actions'] = array(
        '#type' => 'fieldset',
        '#title' => t('Actions'),
        '#weight' => 1
    );
    $factions = $grid->getFactions();
    foreach ($factions as $side) {
      if ($side->getDrawStatus() == 1) {
        $peacemonger = $side;
        break;
      }
    }
    if (_kw_djambi_check_current_user($faction->getControl()->getUserData())) {
      $form['actions']['descriptions'] = array(
          '#type' => 'item',
          '#title' => t('Now playing') . ' : ',
          '#prefix' => '<div class="container-inline">',
          '#suffix' => '</div>',
          '#markup' => t('!faction side', array('!faction' =>
              "<span class='faction " . $faction->getClass() . "'>"
              . $faction->getName("t") . "</span>")),
          '#weight' => -10,
      );
      $form['actions']['explain'] = array(
        '#type' => 'markup',
        '#markup' => t("A peace proposal has been made by !faction side. What is your answer ?",
            array('!faction' => "<span class='faction " . $peacemonger->getClass() . "'>"
                . $peacemonger->getName("t") . "</span>"))
      );
      $form['actions']['accept_peace'] = array(
          '#type' => 'submit',
          '#value' => t("OK, end this game with a draw and stay good friends."),
          '#submit' => array('kw_djambi_game_form_accept_peace_submit'),
          '#ajax' => $ajax_settings
      );
      $form['actions']['reject_peace'] = array(
          '#type' => 'submit',
          '#value' => t("No way, I am sure to win this game."),
          '#submit' => array('kw_djambi_game_form_reject_peace_submit'),
          '#ajax' => $ajax_settings
      );
    }
    else {
      $form['actions']['explain'] = array(
          '#type' => 'markup',
          '#markup' => t("A peace proposal has been made by !faction side. Waiting for !current side answer...",
              array('!faction' => $peacemonger->getName(), '!current' => $faction->getName()))
      );
    }
  }
  elseif ($faction && $grid->getStatus() == KW_DJAMBI_STATUS_PENDING &&
      _kw_djambi_check_current_user($faction->getControl()->getUserData())) {
    $actions = array();
    $descriptions = array();
    // Annulation de sélection d'une pièce
    if (!empty($form_state["kw_djambi"]) && in_array($form_state["kw_djambi"]["phase"], array('move_interactions', 'piece_destination'))) {
      $actions['cancel_selection'] = array(
        '#type' => 'submit',
        '#value' => t('Cancel piece selection'),
        '#submit' => array('kw_djambi_game_form_cancel_selection_submit'),
        '#ajax' => $ajax_settings
      );
    }
    // Annulation d'un mouvement
    elseif ($grid->getMode() == KW_DJAMBI_MODE_SANDBOX && count($grid->getTurns()) > 1) {
      $actions['cancel_last_turn'] = array(
        '#type' => 'submit',
        '#value' => t('Cancel last move'),
        '#submit' => array('kw_djambi_game_form_cancel_last_turn_submit'),
        '#ajax' => $ajax_settings
      );
    }
    // Passer son tour
    $allowed_skip_turns = $grid->getOption('allowed_skipped_turns_per_user');
    if ($allowed_skip_turns == -1 || $allowed_skip_turns > $faction->getSkippedTurns()) {
      if (empty($form_state['kw_djambi']['selected_piece'])) {
        $actions['skip_turn'] = array(
          '#type' => 'submit',
          '#value' => $allowed_skip_turns == -1 ? t('Skip turn') : t('Skip turn (!nb of !max already skipped)', array(
            '!nb' => $faction->getSkippedTurns(), '!max' => $allowed_skip_turns)),
          '#submit' => array('kw_djambi_game_form_skip_turn_submit'),
          '#ajax' => $ajax_settings
        );
      }
      if ($allowed_skip_turns == -1) {
        $descriptions[] = t('There is no limitation concerning turn skippings.');
      }
      else {
        $descriptions[] = format_plural($allowed_skip_turns, t('You can only skip your turn 1 time.'),
          'You can skip your turn only !nb times', array('!nb' => $allowed_skip_turns));
      }
    }
    // Proposer une nulle
    $draw_proposal_delay = $grid->getOption('turns_before_draw_proposal');
    $turns = $grid->getTurns();
    if ($draw_proposal_delay != -1 && $faction->getLastDrawProposal() + $draw_proposal_delay <= $turns[$grid->getCurrentTurnId()]['turn']) {
      $actions['draw_proposal'] = array(
        '#type' => 'submit',
        '#value' => t('Ask for a draw'),
        '#submit' => array('kw_djambi_game_form_draw_proposal_submit'),
        '#ajax' => $ajax_settings
      );
      if ($draw_proposal_delay > 1) {
        $descriptions[] = t('You can ask for a draw every !nb turns', array('!nb' => $draw_proposal_delay));
      }
      $descriptions[] = t('Asking for a draw will end your turn without making a piece move.');
    }
    elseif ($draw_proposal_delay == -1) {
      $descriptions[] = t('No mercy game : draw proposals are forbidden.');
    }
    else {
      $descriptions[] = t('You cannot ask for a draw before turn !turn.',
          array('!turn' => ($faction->getLastDrawProposal() + $draw_proposal_delay)));
    }
    // Abandonner
    $actions['withdrawal'] = array(
        '#type' => 'submit',
        '#value' => t('Withdraw'),
        '#submit' => array('kw_djambi_game_form_withdraw_submit'),
        '#ajax' => $ajax_settings
    );
    // Retour après abandon
    if ($grid->getOption('rule_comeback') == 'allowed' && $grid->getMode() == KW_DJAMBI_MODE_SANDBOX) {
      foreach ($grid->getFactions() as $playing_faction) {
        if ($playing_faction->canComeBackAfterWithdraw()) {
          $actions['comeback']['comeback_' . $playing_faction->getId()] = array(
              '#type' => 'submit',
              '#value' => t('Allow !faction side to come back in the game', array(
                  '!faction' => $playing_faction->getName())),
              '#submit' => array('kw_djambi_game_form_comeback_submit'),
              '#ajax' => $ajax_settings,
              '#weight' => 10
             );
        }
      }
      if (isset($actions['comeback'])) {
        $actions['comeback']['separator'] = array(
            '#markup' => '<hr />'
            );
      }
    }
    // Regroupement des actions dans un fieldset
    if (!empty($actions) || !empty($descriptions)) {
      $form['actions'] = array(
        '#type' => 'fieldset',
        '#title' => t('Actions'),
        '#weight' => 1
      );
      foreach ($actions as $key => $value) {
        $form['actions'][$key] = $value;
      }
      if (!empty($descriptions)) {
        $form['actions']['descriptions'] = array(
            '#type' => 'item',
            '#title' => t('Now playing') . ' : ',
            '#prefix' => '<div class="container-inline">',
            '#suffix' => '</div>',
            '#markup' => t('!faction side', array('!faction' =>
                "<span class='faction " . $faction->getClass() . "'>"
                . $faction->getName("t") . "</span>")),
            '#weight' => -10,
            '#description' => theme('item_list', array('items' => $descriptions))
        );
      }
    }
    // Par défaut : phase de sélection des pièces
    if (!isset($form_state['kw_djambi'])) {
      $form_state['kw_djambi'] = array(
        'phase' => 'piece_selection'
      );
    }
    // Sélection des pièces
    $is_current_user = _kw_djambi_check_current_user($faction->getControl()->getUserData());
    if ($is_current_user) {
      $piece_selection_phases = array('piece_selection', 'piece_destination');
      if ($is_current_user && in_array($form_state['kw_djambi']['phase'], $piece_selection_phases)) {
        /* @var $piece DjambiPiece */
        foreach($faction->getControlledPieces() as $key => $piece) {
          if ($piece->isMovable()) {
            $form['pieces']['movable'][$piece->getId()] = array(
                '#type' => 'image_button',
                '#return_value' => $piece->getId(),
                '#src' => $piece->getImage(),
                '#attributes' => array('alt' => t('Move !piece', array('!piece' => $piece->getShortname('t')))),
                '#ajax' => $ajax_settings
            );
          }
        }
        $form['piece_destination'] = array(
            '#type' => 'hidden',
            '#value' => ''
        );
      }
      // Destination des pièces
      if ($form_state['kw_djambi']['phase'] == 'piece_destination') {
        /* @var $selected_piece DjambiPiece */
        $selected_piece = $form_state['kw_djambi']['selected_piece'];
        $form['pieces']['destination']['#selected_piece_id'] = $selected_piece->getId();
        $reachable_cells = $selected_piece->getAllowableMoves();
        foreach ($reachable_cells as $key => $cell_key) {
          $alt_text = t('Move the !piece here (!case).', array(
            '!piece' => _kw_djambi_get_full_piece_name($selected_piece), '!case' => $cell_key
          ));
          $form['pieces']['destination']['cell-' . $cell_key] = array(
              '#type' => 'image_button',
              '#return_value' => $cell_key,
              '#src' => base_path() . drupal_get_path('module', 'kw_djambi') . '/img/apply.png',
              '#attributes' => array('alt' => $alt_text, 'title' => $alt_text),
              '#ajax' => $ajax_settings
          );
        }
        $form["pieces"]["movable"][$selected_piece->getId()]["#attributes"]["class"][] = "selected";
        $phase_text = t("The !piece is selected. Choose now its destination case, or select another piece to move.",
            array("!piece" => "<span class='piece " . $selected_piece->getType() . "'>" . _kw_djambi_get_full_piece_name($selected_piece) . "</span>")
        );
      }
      // Résultat du déplacement
      elseif ($form_state['kw_djambi']['phase'] == 'move_interactions') {
        $current_interaction = current($form_state['kw_djambi']['interactions']);
        $selected_piece = $form_state['kw_djambi']['selected_piece'];
        // Cas 1 : placement d'une pièce tuée
        if ($current_interaction['type'] == 'murder') {
          $form['pieces']['murder']['#selected_piece_id'] = $selected_piece->getId();
          $victim_piece = $current_interaction['target'];
          $free_cells = $grid->getFreeCells($victim_piece, FALSE);
          foreach ($free_cells as $cell) {
            $alt_text = t('Bury !piece in !case', array(
                '!piece' => _kw_djambi_get_full_piece_name($victim_piece), '!case' => $cell
            ));
            $form['pieces']['murder']['cell-' . $cell] = array(
                '#type' => 'image_button',
                '#return_value' => $cell,
                '#src' => base_path() . drupal_get_path('module', 'kw_djambi') . '/img/flag_black.png',
                '#attributes' => array('alt' => $alt_text, 'title' => $alt_text),
                '#ajax' => $ajax_settings
            );
          }
          $phase_text = t('Your !piece has killed the !victim, select now the case where you victim will rest in peace.',
              array(
                  '!piece' => '<span class="piece ' . $selected_piece->getType() . '">' . _kw_djambi_get_full_piece_name($selected_piece) . '</span>',
                  '!victim' => '<span class="piece ' . $victim_piece->getType() . '">' . _kw_djambi_get_full_piece_name($victim_piece) . '</span>'
              ));
        }
        // Cas 2 : placement d'une pièce tuée déplacée
        elseif ($current_interaction["type"] == "necromobility") {
          $form["pieces"]["necromobility"]["#selected_piece_id"] = $selected_piece->getId();
          $victim_piece = $current_interaction["target"];
          $free_cells = $grid->getFreeCells($victim_piece);
          foreach ($free_cells as $cell) {
            $alt_text = t("Move the dead piece to case !case.", array("!case" => $cell));
            $form["pieces"]["necromobility"]["cell-" . $cell] = array(
                "#type" => "image_button",
                "#return_value" => $cell,
                "#src" => base_path() . drupal_get_path("module", "kw_djambi") . "/img/flag_black.png",
                "#attributes" => array("alt" => $alt_text, "title" => $alt_text),
                '#ajax' => $ajax_settings
            );
          }
          $phase_text = t("Your !piece has exhumed an old dead piece, select now its new burial place.", array(
              "!piece" => "<span class='piece " . $selected_piece->getType() . "'>" . _kw_djambi_get_full_piece_name($selected_piece) . "</span>"
          ));
        }
        // Cas 3 : placement d'une pièce manipulée
        elseif ($current_interaction["type"] == "manipulation") {
          $form["pieces"]["manipulation"]["#selected_piece_id"] = $selected_piece->getId();
          $manipulated_piece = $current_interaction["target"];
          $free_cells = $grid->getFreeCells($manipulated_piece);
          foreach ($free_cells as $cell) {
            $alt_text = t("Move manipulated !piece to !case", array(
                "!piece" => _kw_djambi_get_full_piece_name($manipulated_piece), "!case" => $cell
            ));
            $form["pieces"]["manipulation"]["cell-" . $cell] = array(
                "#type" => "image_button",
                "#return_value" => $cell,
                "#src" => base_path() . drupal_get_path("module", "kw_djambi") . "/img/note2.png",
                "#attributes" => array("alt" => $alt_text, "title" => $alt_text),
                '#ajax' => $ajax_settings
            );
          }
          $phase_text = t("Your !diplomat is manipulating the !piece, select now the destination case for your subjucated victim.",
              array(
                  "!diplomat" => "<span class='piece " . $selected_piece->getType() . "'>" . _kw_djambi_get_full_piece_name($selected_piece) . "</span>",
                  "!piece" => "<span class='piece " . $manipulated_piece->getType() . "'>" . _kw_djambi_get_full_piece_name($manipulated_piece) . "</span>"
              ));
        }
        // Cas 4 : sélection de la victime d'un reportage
        elseif ($current_interaction["type"] == "reportage") {
          $form["pieces"]["reportage"]["#selected_piece_id"] = $selected_piece->getId();
          foreach ($current_interaction["victims"] as $victim) {
            $position = DjambiBattlefield::locateCell($victim->getPosition());
            $alt_text = t("Lauch an inquiry on !piece", array(
                "!piece" => _kw_djambi_get_full_piece_name($victim)
            ));
            $form["pieces"]["reportage"]["cell-" . $position] = array(
                "#type" => "image_button",
                "#return_value" => $position,
                "#src" => base_path() . drupal_get_path("module", "kw_djambi") . "/img/flag_black.png",
                "#attributes" => array("alt" => $alt_text, "title" => $alt_text),
                '#ajax' => $ajax_settings
            );
          }
          $phase_text = t("Your !reporter has to choose beetween several victims...",
              array("!reporter" => "<span class='piece " . $selected_piece->getType() . "'>" . _kw_djambi_get_full_piece_name($selected_piece) . "</span>"));
        }
        // Cas 5 : évacuation du trône
        elseif ($current_interaction["type"] == "throne_evacuation") {
          $form["pieces"]["throne_evacuation"]["#selected_piece_id"] = $selected_piece->getId();
          $selected_piece->buildAllowableMoves(FALSE);
          foreach ($selected_piece->getAllowableMoves() as $key => $position) {
            $alt_text = t("Move your !piece to !case", array(
                "!piece" => _kw_djambi_get_full_piece_name($selected_piece),
                "!case" => $position
            ));
            $form["pieces"]["throne_evacuation"]["cell-" . $position] = array(
                "#type" => "image_button",
                "#return_value" => $position,
                "#src" => base_path() . drupal_get_path("module", "kw_djambi") . "/img/apply.png",
                "#attributes" => array("alt" => $alt_text, "title" => $alt_text),
                '#ajax' => $ajax_settings
            );
          }
          $phase_text = t("Your !piece is not allowed to stay here. Run away !",
              array("!piece" => "<span class='piece " . $selected_piece->getType() . "'>" . _kw_djambi_get_full_piece_name($selected_piece) . "</span>"));
        }
      }
      // Attente du mouvement...
      elseif ($form_state["kw_djambi"]["phase"] == "piece_selection") {
        $phase_text = t("It's your turn. Select a movable piece in the grid...");
      }
    }
  }
  // Affichage de la phase en cours de la partie
  if (!is_null($phase_text)) {
    $form["textes"]["phase"] = array(
      "#type" => "markup",
      "#markup" => $phase_text
    );
  }
  // Log des événements
  $default_value = 20;
  $nb_current_msg = !isset($form_state['kw_logs']['end']) ? $default_value : $form_state['kw_logs']['end'];
  $log = _kw_djambi_build_log($grid);
  $nb_total_msg = count($log['msg']);
  $ajax_log_settings = array(
      'callback' => 'kw_djambi_ajax_log_callback',
      'wrapper' => 'GridLog' . $grid->getId(),
      'effect' => 'fade',
      'method' => 'replace',
  );
  if ($nb_current_msg == -1) {
    $nb_current_msg = $nb_total_msg;
    $offset_length = $nb_total_msg;
  }
  else {
    $offset_length = $default_value;
  }
  $msg = array_slice($log['msg'], isset($form_state['kw_logs']['begin']) ? $form_state['kw_logs']['begin'] : 0, $offset_length, TRUE);
  $form['log']['container'] = array(
      'history' => array(
        '#markup' => theme('item_list', array('items' => $msg))),
      'more' => array(
        '#type' => 'container',
        '#attributes' => array('id' => 'GridLog' . $grid->getId())
      )
  );
  if ($nb_total_msg > ($nb_current_msg + 20)) {
    $form['log']['container']['more']['load_more_logs'] = array(
      '#type' => 'submit',
      '#value' => t('Load 20 older logs'),
      '#submit' => array('kw_djambi_load_more_logs'),
      '#ajax' => $ajax_log_settings
    );
  }
  if ($nb_total_msg > $nb_current_msg) {
    $form['log']['container']['more']['load_all_logs'] = array(
        '#type' => 'submit',
        '#value' => t('Load all logs'),
        '#submit' => array('kw_djambi_load_all_logs'),
        '#ajax' => $ajax_log_settings
    );
  }
  // Afichage des stats
  $stats = _kw_djambi_build_stats($grid);
  $form['stats']['items'] = array(
      '#markup' => theme('item_list', array('items' => $stats, 'attributes' => array('class' => array('stats'))))
  );
  // Redirection
  $form["#action"] = "#DjambiGrid" . $grid->getId();
  return $form;
}

/**
 * Soumission de formulaire : chargement de logs supplémentaires
 */
function kw_djambi_load_more_logs($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  if (!isset($form_state['kw_logs']) || $form_state['kw_logs']['end'] == -1) {
    $form_state['kw_logs']['end'] = 20;
  }
  $form_state['kw_logs']['begin'] = $form_state['kw_logs']['end'];
  $form_state['kw_logs']['end'] += 20;
}

/**
 * Soumission de formulaire : chargement de tous les logs
 */
function kw_djambi_load_all_logs($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $form_state['kw_logs']['begin'] = isset($form_state['kw_logs']['end']) ? $form_state['kw_logs']['end'] : 20;
  $form_state['kw_logs']['end'] = -1;
}

/**
 * Fonction appelée après une requête Ajax : regénération du formulaire de jeu
 */
function kw_djambi_ajax_callback($form, $form_state) {
  return $form;
}

/**
 * Fonction appelée après une requête Ajax : chargement des logs
 */
function kw_djambi_ajax_log_callback($form, $form_state) {
  return $form['log']['container'];
}

/**
 * Validation des actions sur la grille de jeu
 */
function kw_djambi_game_form_validate($form, &$form_state) {
  /* @var $grid DjambiBattlefield */
  $grid = $form["#grid"];
  $errors = array();
  $button = $form_state["triggering_element"];
  $type_button = isset($button["#array_parents"][1]) ? $button["#array_parents"][1] : NULL;
  if ($type_button == "movable") {
    $piece = kw_djambi_piece_selection_validate($errors, $button["#return_value"], $grid);
    if ($piece && isset($form_state["kw_djambi"]["selected_piece"])) {
      $selected_piece = $form_state["kw_djambi"]["selected_piece"];
      if ($piece->getId() == $selected_piece->getId()) {
        $piece = FALSE;
        unset($form_state["kw_djambi"]["selected_piece"]);
        $form_state["kw_djambi"]["phase"] = "piece_selection";
      }
    }
    if ($piece) {
      $form_state["kw_djambi"]["phase"] = "piece_destination";
      $form_state["kw_djambi"]["selected_piece"] = $piece;
      if (!empty($form_state["input"]["piece_destination"])) {
        $destination = kw_djambi_piece_destination_validate($errors, $piece, $form_state["input"]["piece_destination"], NULL);
        if ($destination) {
          $form_state["kw_djambi"]["phase"] = "move_result";
          $form_state["kw_djambi"]["selected_destination"] = $form_state["input"]["piece_destination"];
        }
      }
    }
  }
  elseif ($type_button == "destination" && isset($form_state["kw_djambi"]["selected_piece"])) {
    $piece = $form_state["kw_djambi"]["selected_piece"];
    $destination = kw_djambi_piece_destination_validate($errors, $piece, $button["#return_value"], $button["#name"]);
    if ($destination) {
      $form_state["kw_djambi"]["phase"] = "move_result";
      $form_state["kw_djambi"]["selected_destination"] = $button["#return_value"];
    }
  }
  elseif (isset($form_state["kw_djambi"]["interactions"])) {
    $current_interaction = current($form_state["kw_djambi"]["interactions"]);
    if ($current_interaction["type"] == "murder" && $type_button == $current_interaction["type"]) {
      $victim_piece = $current_interaction["target"];
      $death = kw_djambi_piece_murder_validate($errors, $grid, $victim_piece, $button["#return_value"], $button["#name"]);
      if ($death) {
        $form_state["kw_djambi"]["phase"] = "interaction_result";
        $form_state["kw_djambi"]["selected_interaction"] = $button["#return_value"];
      }
    }
    elseif ($current_interaction["type"] == "necromobility" && $type_button == $current_interaction["type"]) {
      $manipulated_piece = $current_interaction["target"];
      $manipulation = kw_djambi_piece_necromobility_validate($errors, $grid, $manipulated_piece, $button["#return_value"], $button["#name"]);
      if ($manipulation) {
        $form_state["kw_djambi"]["phase"] = "interaction_result";
        $form_state["kw_djambi"]["selected_interaction"] = $button["#return_value"];
      }
    }
    elseif ($current_interaction["type"] == "manipulation" && $type_button == $current_interaction["type"]) {
      $manipulated_piece = $current_interaction["target"];
      $manipulation = kw_djambi_piece_manipulation_validate($errors, $grid, $manipulated_piece, $button["#return_value"], $button["#name"]);
      if ($manipulation) {
        $form_state["kw_djambi"]["phase"] = "interaction_result";
        $form_state["kw_djambi"]["selected_interaction"] = $button["#return_value"];
      }
    }
    elseif ($current_interaction["type"] == "reportage" && $type_button == $current_interaction["type"]) {
      $reporter = $form_state["kw_djambi"]["selected_piece"];
      $reportage = kw_djambi_piece_reportage_validate($errors, $grid, $reporter, $button["#return_value"], $button["#name"]);
      if ($reportage) {
        $form_state["kw_djambi"]["phase"] = "interaction_result";
        $form_state["kw_djambi"]["selected_interaction"] = $button["#return_value"];
      }
    }
    elseif ($current_interaction["type"] == "throne_evacuation" && $type_button == $current_interaction["type"]) {
      $evacuated_piece = $form_state["kw_djambi"]["selected_piece"];
      $evacuation = kw_djambi_piece_evacuation_validate($errors, $grid, $evacuated_piece, $button["#return_value"], $button["#name"]);
      if ($evacuation) {
        $form_state["kw_djambi"]["phase"] = "interaction_result";
        $form_state["kw_djambi"]["selected_interaction"] = $button["#return_value"];
      }
    }
  }
  if (!empty($errors)) {
    foreach ($errors as $error) {
      form_set_error($error["location"], $error["msg"]);
    }
  }
}

/**
 * Validation de la sélection d'une pièce
 */
function kw_djambi_piece_selection_validate(&$errors, $piece_id, DjambiBattlefield $grid) {
  global $user;
  $errors = array();
  $piece_form_locator = "pieces[movable][" . $piece_id;
  $faction = $grid->getPlayingFaction();
  $is_current_user = _kw_djambi_check_current_user($faction->getControl()->getUserData());
  if (!$is_current_user) {
    $errors[] = array(
      "location" => $piece_form_locator,
      "msg" => t("You do not own the !faction pieces.", array("!faction", $faction->getName("t")))
    );
    return FALSE;
  }
  $pieces = $faction->getControlledPieces();
  if (!isset($pieces[$piece_id])) {
    $errors[] =  array(
      "location" => $piece_form_locator,
      "msg" => t("Unrecognized piece.")
    );
    return FALSE;
  }
  $piece = $pieces[$piece_id];
  if (!$piece->isMovable()) {
    $errors = array(
      "location" => $piece_form_locator,
      "msg" => t("The piece !piece cannot move currently.", array("!piece" => $piece->getLongname("t")))
    );
  }
  if (!empty($errors)) {
    return FALSE;
  }
  return $piece;
}

/**
 * Validation du déplacement d'une pièce
 */
function kw_djambi_piece_destination_validate(&$errors, DjambiPiece $piece, $destination, $button_name) {
  $move = FALSE;
  foreach($piece->getAllowableMoves() as $allowable_move) {
    if($destination == $allowable_move) {
      $move = $destination;
      break;
    }
  }
  if (!$move && !is_null($button_name)) {
    $errors[] = array(
      "location" => "pieces[destination][" . $button_name,
      "msg" => t("You are not allowed to move !piece into !case case.", array(
        "!piece" => $piece->getLongname("t"), "!case" => $destination))
    );
  }
  return $move;
}

/**
 * Validation du meurtre d'une pièce
 */
function kw_djambi_piece_murder_validate(&$errors, DjambiBattlefield $grid, DjambiPiece $piece, $destination, $button_name) {
  if (!$piece->isAlive()) {
    $errors[] = array(
      "location" => "pieces[destination][" . $button_name,
      "msg" => t("Your victim seems to be already dead.")
    );
    return FALSE;
  }
  if ($piece->getFaction()->getControl() == $grid->getPlayingFaction()) {
    $errors[] = array(
      "location" => "pieces[destination][" . $button_name,
      "msg" => t("You are not allowed to kill one of your pieces, you crazy bastard !")
    );
    return FALSE;
  }
  $free_cells = $grid->getFreeCells($piece);
  if (!in_array($destination, $free_cells)) {
    $errors[] = array(
      "location" => "pieces[destination][" . $button_name,
      "msg" => t("You cannot place bury your victim here, case !case is unavailable.", array("!case" => $destination))
    );
    return FALSE;
  }
  return TRUE;
}

/**
 * Validation du reportage sur une pièce
 */
function kw_djambi_piece_reportage_validate(&$errors, DjambiBattlefield $grid, DjambiPiece $piece, $destination, $button_name) {
  $cells = $grid->getCells();
  if (!isset($cells[$destination])) {
    $errors[] = array(
      "location" => "pieces[destination][" . $button_name,
      "msg" => t("The reportage location is totally incorrect.")
    );
    return FALSE;
  }
  if (empty($cells[$destination]["occupant"])) {
    $errors[] = array(
      "location" => "pieces[destination][" . $button_name,
      "msg" => t("There is nobody here (!case).", array("!case" => $destination))
    );
    return FALSE;
  }
  $occupant = $cells[$destination]["occupant"];
  if (!$occupant->isAlive()) {
    $errors[] = array(
      "location" => "pieces[destination][" . $button_name,
      "msg" => t("Already dead, too late for a reportage.")
    );
    return FALSE;
  }
  if ($occupant->getFaction()->getControl()->getId() == $piece->getFaction()->getControl()->getId()) {
    $errors[] = array(
      "location" => "pieces[destination][" . $button_name,
      "msg" => t("It is not a good idea to make a reportage about your own team evil actions.")
    );
    return FALSE;
  }
  return TRUE;
}

/**
 * Validation de la manipulation d'une pièce
 */
function kw_djambi_piece_manipulation_validate(&$errors, DjambiBattlefield $grid, DjambiPiece $piece, $destination, $button_name) {
  if (!$piece->isAlive()) {
    $errors[] = array(
      "location" => "pieces[destination][" . $button_name,
      "msg" => t("You cannot manipulate a dead piece (use a necromobil for this disgusting work).")
    );
    return FALSE;
  }
  if($piece->getFaction()->getControl() == $grid->getPlayingFaction()) {
    $errors[] = array(
      "location" => "pieces[destination][ " . $button_name,
      "msg" => t("You cannot manipulate your pieces.")
    );
    return FALSE;
  }
  $free_cells = $grid->getFreeCells($piece);
  if (!in_array($destination, $free_cells)) {
    $errors[] = array(
      "location" => "pieces[destination][" . $button_name,
      "msg" => t("You cannot place the manipulated piece here, case !case is unavailable.", array("!case" => $destination))
    );
    return FALSE;
  }
  return TRUE;
}

/**
 * Validation du déplacement d'un mort
 */
function kw_djambi_piece_necromobility_validate(&$errors, DjambiBattlefield $grid, DjambiPiece $piece, $destination, $button_name) {
  if ($piece->isAlive()) {
    $errors[] = array(
      "location" => "pieces[destination][" . $button_name,
      "msg" => t("This dead body is still breathing...")
    );
    return FALSE;
  }
  $free_cells = $grid->getFreeCells($piece);
  if (!in_array($destination, $free_cells)) {
    $errors[] = array(
      "location" => "pieces[destination][" . $button_name,
      "msg" => t("You cannot place the dead piece here, case !case is unavailable.", array("!case" => $destination))
    );
    return FALSE;
  }
  return TRUE;
}

/**
 * Validation de l'évacuation d'un pion
 */
function kw_djambi_piece_evacuation_validate(&$errors, DjambiBattlefield $grid, DjambiPiece $piece, $destination, $button_name) {
  return kw_djambi_piece_destination_validate($errors, $piece, $destination, $button_name);
}

/**
 * Soumission du formulaire de jeu
 */
function kw_djambi_game_form_submit($form, &$form_state) {
  $change_turn = FALSE;
  $grid = $form['#grid'];
  $form_state['rebuild'] = TRUE;
  switch ($form_state['kw_djambi']['phase']) {
    case('interaction_result') :
      $interaction = current($form_state['kw_djambi']['interactions']);
      $piece = $form_state['kw_djambi']['selected_piece'];
      if ($interaction['type'] == 'murder') {
        $victim_piece = $interaction['target'];
        $piece->kill($victim_piece, $form_state['kw_djambi']['selected_interaction']);
        $grid = $piece->getFaction()->getBattlefield();
      }
      elseif ($interaction['type'] == 'necromobility') {
        $victim_piece = $interaction['target'];
        $piece->necromove($victim_piece, $form_state['kw_djambi']['selected_interaction']);
        $grid = $piece->getFaction()->getBattlefield();
      }
      elseif ($interaction['type'] == 'manipulation') {
        $manipulated_piece = $interaction['target'];
        $piece->manipulate($manipulated_piece, $form_state['kw_djambi']['selected_interaction']);
        $grid = $piece->getFaction()->getBattlefield();
      }
      elseif ($interaction['type'] == 'reportage') {
        $grid = $piece->getFaction()->getBattlefield();
        $cells = $grid->getCells();
        $victim = $cells[$form_state['kw_djambi']['selected_interaction']]['occupant'];
        $piece->kill($victim, $form_state['kw_djambi']['selected_interaction']);
        $grid = $piece->getFaction()->getBattlefield();
      }
      elseif ($interaction['type'] == 'throne_evacuation') {
        $piece->move($form_state['kw_djambi']['selected_interaction'], FALSE);
        $grid = $piece->getFaction()->getBattlefield();
      }
      $interaction_key = key($form_state['kw_djambi']['interactions']);
      unset($form_state['kw_djambi']['interactions'][$interaction_key]);
      unset($form_state['kw_djambi']['selected_interaction']);
      if (empty($form_state['kw_djambi']['interactions'])) {
        $change_turn = TRUE;
      }
      else {
        $form_state['kw_djambi']['phase'] = 'move_interactions';
      }
      break;
    case('move_result') :
      /* @var $piece DjambiPiece */
      $piece = $form_state['kw_djambi']['selected_piece'];
      $move_results = $piece->move($form_state['kw_djambi']['selected_destination']);
      $grid = $piece->getFaction()->getBattlefield();
      $form_state['kw_djambi']['selected_piece'] = $piece;
      if (!empty($move_results)) {
        $form_state['kw_djambi']['phase'] = 'move_interactions';
        $form_state['kw_djambi']['interactions'] = $move_results;
      }
      else {
        $change_turn = TRUE;
      }
      break;
  }
  if ($change_turn) {
    /* @var $grid DjambiBattlefield */
    $grid->changeTurn();
    kw_djambi_save_game($grid);
  }
  $form_state['kw_djambi']['change_turn'] = $change_turn;
}

/**
 * Soumission de formulaire : annulation de la sélection d'une pièce
 */
function kw_djambi_game_form_cancel_selection_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  if (isset($form_state['kw_djambi'])) {
    unset($form_state['kw_djambi']);
  }
}

/**
 * Soumission du bouton d'annulation du dernier tour du jeu
 */
function kw_djambi_game_form_cancel_last_turn_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $form_state['kw_djambi']['change_turn'] = TRUE;
  $grid = $form['#grid'];
  $grid->cancelLastTurn();
  kw_djambi_save_game($grid);
}

/**
 * Soumission du bouton "passer son tour"
 */
function kw_djambi_game_form_skip_turn_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $grid = $form['#grid'];
  $faction = $grid->getPlayingFaction();
  $faction->skipTurn();
  $grid = $faction->getBattlefield();
  kw_djambi_save_game($grid);
}

/**
 * Soumission du bouton "Abandonner la partie"
 */
function kw_djambi_game_form_withdraw_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $grid = $form['#grid'];
  $faction = $grid->getPlayingFaction();
  $faction->withdraw();
  $grid = $faction->getBattlefield();
  $grid->changeTurn();
  kw_djambi_save_game($grid);
}

/**
 * Soumission du bouton "Revenir dans la partie"
 */
function kw_djambi_game_form_comeback_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $grid = $form['#grid'];
  $clicked_button = $form_state['clicked_button']['#parents'][0];
  $id = substr($clicked_button, strpos($clicked_button, '_') + 1);
  $faction = $grid->getFactionById($id);
  $faction->comeBackAfterWithdraw();
  $grid = $faction->getBattlefield();
  kw_djambi_save_game($grid);
}

/**
 * Soumission du bouton "Proposer une partie nulle"
 */
function kw_djambi_game_form_draw_proposal_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $grid = $form['#grid'];
  $faction = $grid->getPlayingFaction();
  $faction->callForADraw();
  $grid = $faction->getBattlefield();
  kw_djambi_save_game($grid);
}

/**
 * Soumission du bouton "Accepter une partie nulle"
 */
function kw_djambi_game_form_accept_peace_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $grid = $form['#grid'];
  $faction = $grid->getPlayingFaction();
  $faction->acceptDraw();
  $grid = $faction->getBattlefield();
  kw_djambi_save_game($grid);
}

/**
 * Soumission du bouton "Refuser une partie nulle"
 */
function kw_djambi_game_form_reject_peace_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $grid = $form['#grid'];
  $faction = $grid->getPlayingFaction();
  $faction->rejectDraw();
  kw_djambi_save_game($grid);
}

/**
 * Sauvegarde en BdD du jeu
 * @param DjambiBattlefield $grid
 */
function kw_djambi_save_game(DjambiBattlefield $grid) {
  $compress = FALSE;
  if ($grid->getStatus() == KW_DJAMBI_STATUS_FINISHED) {
    $compress = TRUE;
  }
  $data = serialize($grid->toDatabase());
  if ($compress) {
    $data = gzcompress($data);
  }
  $query1 = db_update('djambi_node');
  $moves = 0;
  foreach ($grid->getMoves() as $move) {
    if ($move['type'] == 'move') {
      $moves++;
    }
  }
  $query1->fields(array(
      'nb_moves' => $moves,
      'data' => $data,
      'changed' => time(),
      'status' => $grid->getStatus(),
      'autodelete' => $grid->getInfo('autodelete') == 0 ? 0 : _kw_djambi_autodelete_time($grid->getMode()),
      'compressed' => $compress ? 1 : 0
  ));
  $query1->condition('nid', $grid->getId());
  $query1->execute();
  foreach ($grid->getFactions() as $key => $faction) {
    $query2 = db_update('djambi_users');
    $query2->fields(array(
        'status' => $faction->getStatus(),
        'ranking' => $faction->getRanking()
    ));
    $query2->condition('nid', $grid->getId());
    $query2->condition('faction', $faction->getId());
    $query2->execute();
  }
}

/**
 * Création du label d'une pièce
 * @param DjambiPiece $piece
 */
function _kw_djambi_get_full_piece_name(DjambiPiece $piece) {
  return t("!color !longname", array(
    "!color" => _kw_djambi_get_translatable_messages($piece->getFaction()->getName()),
    "!longname" => _kw_djambi_get_translatable_messages($piece->getLongname())
  ));
}

/**
 * Fixe le temps de conservation d'une partie
 * @param String $mode
 */
function _kw_djambi_autodelete_time($mode) {
  return time() + 60 * 60 * 24;
}

/**
 * Renvoie une liste d'événements survenus lors d'une partie
 * @param DjambiBattlefield $grid
 */
function _kw_djambi_build_log(DjambiBattlefield $grid) {
  $log = array();
  foreach ($grid->getEvents() as $key => $event) {
    $args = array();
    if (is_array($event["args"])) {
      foreach ($event["args"] as $key => $arg) {
        if (substr($key, 0, 2) == "!!") {
          $arg = _kw_djambi_get_translatable_messages($arg);
        }
        $args[$key] = $arg;
      }
    }
    $msg = _kw_djambi_get_translatable_messages($event["event"], $args, $grid);
    $log["time"][] = $event["time"];
    $log["msg"][] = "<div class='event ". $event["type"] . "'><span class=''>" . format_date($event["time"], "short") . " :</span> " . $msg . "</div>";
  }
  foreach ($grid->getMoves() as $key => $move) {
    $msg = NULL;
    $piece = $grid->getPieceById($move["target"]);
    if ($move["type"] == "move") {
      $faction = $grid->getFactionById($move["target_faction"]);
      $msg = t("!faction has moved !piece from !origin to !destination.", array(
          "!faction" => "<span class='faction " . $faction->getClass() . "'>" . $faction->getName("t") . "</span>",
          "!piece" =>  "<span class='piece " . $piece->getType() . "'>" . _kw_djambi_get_full_piece_name($piece) . "</span>",
          "!origin" => $move["from"],
          "!destination" => $move["to"]
      ));
    }
    elseif ($move["type"] == "murder") {
      $victim = $piece;
      $responsable = $grid->getPieceById($move["acting"]);
      $msg = t("!victim has been killed by !piece. The crime took place in !origin, and the victim body was found in !destination.", array(
          "!victim" => "<span class='piece " . $victim->getType() . "'>" . _kw_djambi_get_full_piece_name($victim) . "</span>",
          "!piece" =>  "<span class='piece " . $responsable->getType() . "'>" . _kw_djambi_get_full_piece_name($responsable) . "</span>",
          "!origin" => $move["from"],
          "!destination" => $move["to"]
      ));
    }
    elseif ($move["type"] == "necromobility") {
      $responsable = $grid->getPieceById($move["acting"]);
      $msg = t("!piece has exhumed a dead body from !origin. Its new burial place is located in !destination.", array(
          "!piece" =>  "<span class='piece " . $responsable->getType() . "'>" . _kw_djambi_get_full_piece_name($responsable) . "</span>",
          "!origin" => $move["from"],
          "!destination" => $move["to"]
      ));
    }
    elseif ($move["type"] == "manipulation") {
      $victim = $piece;
      $responsable = $grid->getPieceById($move["acting"]);
      $msg = t("!victim has been manipulated by !piece from !origin to !destination.", array(
          "!victim" => "<span class='piece " . $victim->getType() . "'>" . _kw_djambi_get_full_piece_name($victim) . "</span>",
          "!piece" =>  "<span class='piece " . $responsable->getType() . "'>" . _kw_djambi_get_full_piece_name($responsable) . "</span>",
          "!origin" => $move["from"],
          "!destination" => $move["to"]
      ));
    }
    elseif ($move['type'] == 'elimination') {
      $victim = $piece;
      $msg = t("!victim has been eliminated from the game. The action took place in !origin.", array(
          "!victim" => "<span class='piece " . $victim->getType() . "'>" . _kw_djambi_get_full_piece_name($victim) . "</span>",
          "!origin" => $move["from"],
      ));
    }
    if (!empty($msg)) {
      $log["time"][] = $move["time"];
      $log["msg"][] = "<div class='" . $move["type"] . "'><span class=''>" . format_date($move["time"], "short") . " :</span>  " . $msg . "</div>";
    }
    if (!empty($move["special_event"])) {
      $msg2 = _kw_djambi_get_translatable_messages($move["special_event"],
          array("!piece" => _kw_djambi_get_full_piece_name($piece)), $grid);
      $log["time"][] = $move["time"];
      $log["msg"][] = "<div class='event'> " . $msg2 . "</div>";
    }
  }
  array_multisort($log["time"], SORT_DESC, $log["msg"]);
  return $log;
}

/**
 * Génère les tableaux de statistiques
 * @param DjambiBattlefield $grid
 * @return multitype:Ambigous <An, string>
 */
function _kw_djambi_build_stats(DjambiBattlefield $grid) {
  $items = array();
  $factions = $grid->getFactions();
  $throne = NULL;
  $ranking = array();
  foreach ($factions as $faction) {
    //if (!is_null($faction->getRanking())) {
      $ranking[$faction->getId()] = $faction->getRanking();
    //}
    $stats['peace'][$faction->getId()] = 0;
  }
  if (!empty($ranking)) {
    asort($ranking);
  }
  foreach ($grid->getTurns() as $turn) {
    if (!empty($turn['end'])) {
      @$stats['playtime'][$turn['side']] += $turn['end'] - $turn['begin'];
    }
  }
  foreach ($grid->getMoves() as $key => $move) {
    if ($move['type'] == 'move') {
      $cells = $grid->getCells();
      $distance = max(
          abs($cells[$move['from']]['x'] - $cells[$move['to']]['x']),
          abs($cells[$move['from']]['y'] - $cells[$move['to']]['y']));
      @$stats['mobility'][$move['target']] += $distance;
      @$stats['moves']['turns'][$move['target_faction']]++;
      @$stats['moves']['distance'][$move['target_faction']] += $distance;
      if (!empty($move['special_event']) && $move['special_event'] == 'throne access') {
        $throne = $move['target_faction'];
      }
      elseif (!empty($move['special_event']) && ($move['special_event'] == 'throne retreat' || $move['special_event'] == 'throne evacuation')) {
        $throne = NULL;
      }
      if (!is_null($throne)) {
        @$stats['throne'][$throne]++;
      }
    }
    elseif ($move['type'] == 'murder') {
      @$stats['murders'][$move['acting_faction']][$move['target_faction']]++;
      $stats['peace'][$move['acting_faction']]++;
      @$stats['terminator'][$move['acting']]++;
      if ($grid->getPieceById($move['acting'])->getType() == 'reporter') {
        $target = $grid->getPieceById($move['target']);
        @$stats['pulitzer'][$move['acting']]++;
        if ($target->getHability('must_live')) {
          $stats['pulitzer'][$move['acting']] += 4;
        }
        if ($target->getHability('move_dead_pieces')) {
          $stats['pulitzer'][$move['acting']] += 1;
        }
        if (!$target->getHability('limited_move')) {
          $stats['pulitzer'][$move['acting']] += 2;
        }
      }
    }
    elseif ($move['type'] == 'manipulation') {
      @$stats['manipulation'][$move['acting_faction']]++;
    }
    elseif ($move['type'] == 'necromobility') {
      @$stats['necromobility'][$move['acting_faction']]++;
    }
  }
  if ($grid->getStatus() == KW_DJAMBI_STATUS_FINISHED) {
    $header = array(
      array('data' => t('Award')),
      array('data' => t('Awarded to'))
    );
    $rows = array();
    $winners_array = array_keys($ranking, 1, TRUE);
    $winners = array();
    foreach ($winners_array as $winner) {
      $faction = $grid->getFactionById($winner);
      $winners[] = '<span class="faction ' . $faction->getClass() . '">' . $faction->getName() . '</span>';
    }
    $rows[] = array(
      'data' => array(
          array('data' => count($winners) == 1 ? t('Great Beloved Ruler of Djambi') : t("No winner in this game... Last standing teams :"),
              'header' => TRUE),
          array('data' => t('!pieces', array(
              '!pieces' => implode(', ', $winners)))
          )
      ));
    $ranking_array = array();
    foreach ($ranking as $side => $rank) {
      if ($rank == 1) {
        continue;
      }
      $faction = $grid->getFactionById($side);
      $ranking_array[] = t('Rank !rank :  !side', array(
            '!rank' => $rank,
            '!side' => '<span class="faction ' . $faction->getClass() . '">' . $faction->getName() . '</span>'
          ));
    }
    if (!empty($ranking_array)) {
      $rows[] = array(
        'data' => array(
          array('data' => t('Ashamed loser opponents'), 'header' => TRUE),
          array('data' => theme('item_list', array('items' => $ranking_array)))
        )
      );
    }
    if (!empty($stats['mobility']) && max($stats['mobility']) > 1) {
      $move =
      $rows[] = array(
        'data' => array(
          array('data' => t('Forrest Gump Price of mobility'), 'header' => TRUE),
          array('data' => t('!pieces, with !nb cases crossed', array(
              '!pieces' => implode(', ', _kw_djambi_stats_get_winners($grid, 'mobility', $stats)),
              '!nb' => max($stats['mobility'])))
          )
      ));
    }
    if (!empty($stats['terminator']) && max($stats['terminator']) > 1) {
      $rows[] = array(
        'data' => array(
          array('data' => t('Sarah Connor Price of best serial killer'), 'header' => TRUE),
          array('data' => t('!pieces, with !nb victims', array(
              '!pieces' => implode(', ', _kw_djambi_stats_get_winners($grid, 'terminator', $stats)),
              '!nb' => max($stats['terminator'])))
          )
      ));
    }
    if (!empty($stats['necromobility'])) {
      $nmove = max($stats['necromobility']);
      $rows[] = array(
        'data' => array(
          array('data' => t('Pope Formose Price of dead bodies exhumation'), 'header' => TRUE),
          array('data' => format_plural($nmove, '!pieces, with !nb exhumation', '!pieces, with !nb exhumations', array(
              '!pieces' => implode(', ', _kw_djambi_stats_get_winners($grid, 'necromobility', $stats, 'faction')),
              '!nb' => $nmove)))
      ));
    }
    if (!empty($stats['manipulation'])) {
      $manipulations = max($stats['manipulation']);
      $rows[] = array(
        'data' => array(
          array('data' => t('Machiavelli Price of manipulation'), 'header' => TRUE),
          array('data' => format_plural($manipulations, '!pieces, with !nb manipulated piece', '!pieces, with !nb manipulated pieces', array(
              '!pieces' => implode(', ', _kw_djambi_stats_get_winners($grid, 'manipulation', $stats, 'faction')),
              '!nb' => $manipulations))
          )
      ));
    }
    if (!empty($stats['peace']) && min($stats['peace']) < 2) {
      $rows[] = array(
      'data' => array(
          array('data' => t('Nobel Price of peace'), 'header' => TRUE),
          array('data' => implode(', ', _kw_djambi_stats_get_winners($grid, 'peace', $stats, 'faction', 'min')))
      ));
    }
    if (!empty($stats['pulitzer'])) {
      $scandals = max($stats['pulitzer']);
      $rows[] = array(
        'data' => array(
          array('data' => t('Pulitzer Price'), 'header' => TRUE),
          array('data' => implode(', ', _kw_djambi_stats_get_winners($grid, 'pulitzer', $stats)))
      ));
    }
    $items[] = theme('table', array('header' => $header, 'rows' => $rows, 'caption' => 'Table of honours'));
  }
  // Tableau des victimes
  $header = array();
  $header['Sides'] = array('data' => t('Sides'));
  $rows = array();
  $global_total = array(
      'Sides' => array('data' => 'Total', 'header' => TRUE),
  );
  $global_total_data = 0;
  foreach ($factions as $key => $faction) {
    $header[$faction->getId()] = array(
        'data' => t('!faction deaths', array('!faction' => $faction->getId())),
        'class' => array($faction->getClass(), 'faction', 'stats')
        );
    $row = array();
    $row['Sides'] = array(
        'class' => array($faction->getClass(), 'faction'),
        'data' => t('!faction murders', array('!faction' => $faction->getName())),
        'header' => TRUE);
    $total = 0;
    foreach ($factions as $subkey => $subfaction) {
      $murders = isset($stats['murders'][$faction->getId()][$subfaction->getId()]) ?
        $stats['murders'][$faction->getId()][$subfaction->getId()] : 0;
      $total += $murders;
      $row[$subfaction->getId()] = ($faction->getId() != $subfaction->getId()) ? array('data' => $murders, 'class' => array('number'))
        : array('data' => '-', 'class' => array('locked'));
      if (!isset($global_total[$subfaction->getId()])) {
        $global_total[$subfaction->getId()] = array(
            'data' => 0,
            'class' => array('total', 'number')
            );
      }
      $global_total[$subfaction->getId()]['data'] += $murders;
    }
    $row['Total'] = array('data' => $total, 'class' => array('total', 'number'));
    $global_total_data += $total;
    $rows[] = $row;
  }
  $global_total['Total'] = array('data' => $global_total_data, 'class' => array('number'));
  $rows[] = array('data' => $global_total, 'class' => array('total'));
  $header['Total'] = array('data' => t('Total'));
  $items[] = theme('table', array('header' => $header, 'rows' => $rows, 'caption' => t('Table of dead pieces')));
  // Tableau des déplacements
  $header = array(
      array('data' => t('Sides')),
      array('data' => t('Moves')),
      array('data' => t('Distance')),
      array('data' => t('Rule length')),
      array('data' => t('Play time')),
      array('data' => t('Avg t.d.'))
      );
  $rows = array();
  $total = array(
      'class' => array('total'),
      'data' => array(
          0 => array('data' => 'Total'),
          1 => array('data' => 0, 'class' => array('number')),
          2 => array('data' => 0, 'class' => array('number')),
          3 => array('data' => 0, 'class' => array('number')),
          4 => array('data' => 0, 'class' => array('number')),
          5 => array('data' => '-', 'class' => array('number'))
      )
  );
  foreach ($factions as $faction) {
    $row = array();
    $row[0] = array(
        'data' => t('!faction', array('!faction' => $faction->getName())),
        'class' => array($faction->getClass(), 'faction', 'stats'),
        'header' => TRUE
        );
    $row[1] = array(
        'data' => !empty($stats['moves']['turns'][$faction->getId()]) ? $stats['moves']['turns'][$faction->getId()] : 0,
        'class' => 'number');
    $total['data'][1]['data'] += $row[1]['data'];
    $row[2] = array(
        'data' => !empty($stats['moves']['distance'][$faction->getId()]) ? $stats['moves']['distance'][$faction->getId()] : 0,
        'class' => 'number');
    $total['data'][2]['data'] += $row[2]['data'];
    $row[3] = array(
        'data' => !empty($stats['throne'][$faction->getId()]) ? $stats['throne'][$faction->getId()] : 0,
        'class' => 'number');
    $total['data'][3]['data'] += $row[3]['data'];
    $row[4] = array(
        'data' => !empty($stats['playtime'][$faction->getId()]) ?
          kw_tools_duration($stats['playtime'][$faction->getId()]) : 0,
        'class' => 'number');
    if (isset($stats['playtime'][$faction->getId()])) {
      $total['data'][4]['data'] += $stats['playtime'][$faction->getId()];
    }
    $row[5] = array(
        'data' => !empty($stats['playtime'][$faction->getId()]) && !empty($stats['moves']['turns'][$faction->getId()]) ?
          kw_tools_duration($stats['playtime'][$faction->getId()] / $stats['moves']['turns'][$faction->getId()]) : '-',
        'class' => 'number');
    $rows[] = $row;
  }
  if ($total['data'][1]['data'] > 0) {
    $total['data'][5]['data'] = kw_tools_duration($total['data'][4]['data'] / $total['data'][1]['data']);
  }
  $total['data'][4]['data'] = kw_tools_duration($total['data'][4]['data']);
  $rows[] = $total;
  $items[] = theme('table', array('header' => $header, 'rows' => $rows, 'caption' => 'Table of moves'));
  return $items;
}

/**
 * Fonction d'aide à la génération des statistiques
 * Détermine le vainqueur d'un prix
 */
function _kw_djambi_stats_get_winners($grid, $price, $stats, $type = 'piece', $order = 'max') {
  $winners = array_keys($stats[$price], $order == 'min' ? min($stats[$price]) : max($stats[$price]));
  $winners_string_array = array();
  foreach ($winners as $winner) {
    if ($type == 'piece') {
      $piece = $grid->getPieceById($winner);
      $winners_string_array[] = '<span class="piece ' . $piece->getType() . ' ' . $piece->getFaction()->getClass() . '">' . _kw_djambi_get_full_piece_name($piece) . '</span>';
    }
    elseif ($type == 'faction') {
      $faction = $grid->getFactionById($winner);
      $winners_string_array[] = '<span class="faction ' . $faction->getClass() . '">' . $faction->getName() . '</span>';
    }
  }
  return $winners_string_array;
}

function _kw_djambi_check_current_user($user_data) {
  global $user;
  if ($user->uid > 0) {
    if ($user_data['uid'] == $user->uid) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
  else {
    if (!empty($_COOKIE['Drupal_visitor_djambi_cookie_id'])
        && $user_data['cookie'] == $_COOKIE['Drupal_visitor_djambi_cookie_id']) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
}

/**
 * Traduction des chaînes de caractères présentes dans les classes du dossier lib
 */
function _kw_djambi_get_translatable_messages($message, $args = NULL, DjambiBattlefield $grid = NULL) {
  if (isset($args['faction1']) && !is_null($grid)) {
    $faction1 = $grid->getFactionById($args['faction1']);
    $args['!faction1'] = '<span class="faction ' . $faction1->getClass() . '">' . $faction1->getName() . '</span>';
    unset($args['faction1']);
  }
  if (isset($args['faction2']) && !is_null($grid)) {
    $faction2 = $grid->getFactionById($args['faction2']);
    $args['!faction2'] = '<span class="faction ' . $faction2->getClass() . '">' . $faction2->getName() . '</span>';
    unset($args['faction2']);
  }
  switch($message) {
    case("throne access"):
      $txt = t("!piece is now the great and beloved ruler of the djambi world.", $args);
      break;
    case("throne retreat"):
      $txt = t("!piece's reign of despotism and terror is now over.", $args);
      break;
    case("throne evacuation"):
      $txt= t("!piece body has been exhumed from his mausoleum.", $args);
      break;
    case("NEW_DJAMBI_GAME"):
      $txt = t("New djambi chess game created.");
      break;
    case("SURROUNDED"):
      $txt = t("!faction1 leader is surrounded by dead pieces and cannot access to power anymore.", $args);
      break;
    case("END"):
      $txt = t("End of the game !");
      break;
    case("DRAW"):
      $txt = t("This is a draw.");
      break;
    case("THE_WINNER_IS"):
      $txt = t("!faction1 wins !!!", $args);
      break;
    case("TURN_BEGIN"):
      $txt = t("!faction1 turn begins.", $args);
      break;
    case("NEW_TURN"):
      $txt = t("Turn !turn begins.", $args);
      break;
    case("SKIPPED_TURN"):
      $txt = t("!faction1 skipps his turn.", $args);
      break;
    case(KW_DJAMBI_MODE_SANDBOX):
      $txt = t("Sandbox");
      break;
    case(KW_DJAMBI_STATUS_PENDING):
      $txt = t("Game in progress...");
      break;
    case(KW_DJAMBI_STATUS_FINISHED):
      $txt = t("Game over !");
      break;
    case(KW_DJAMBI_STATUS_DRAW_PROPOSAL):
      $txt = t("Peace negociation...");
      break;
    case("Sniper"):
      $txt = t("Sniper");
      break;
    case("Leader"):
      $txt = t("Leader");
      break;
    case("Necromobil"):
      $txt = t("Necromobil");
      break;
    case("Diplomat"):
      $txt = t("Diplomat");
      break;
    case("Reporter"):
      $txt = t("Reporter");
      break;
    case("Leader"):
      $txt = t("Leader");
      break;
    case("Militant #1"):
      $txt = t("Militant #1");
      break;
    case("Militant #2"):
      $txt = t("Militant #2");
      break;
    case("Militant #3"):
      $txt = t("Militant #3");
      break;
    case("CHANGING_SIDE"):
      $txt = t("The desperate remaining !faction1 side's partisans are now joining the !faction2 side !", $args);
      break;
    case("INDEPENDANT_SIDE"):
      $txt = t("The desperate remaining !faction1 side's partisans are no longing supporting the !faction2 side.", $args);
      break;
    case("GAME_OVER"):
      $txt = t("Game over for !faction1 side !", $args);
      break;
    case("WITHDRAWAL"):
      $txt = t("The hopeless !faction1 leader decided to withdraw from the game. Shame on him.
        His remaining pieces stay neutrally in the board, waiting for a better cause to support.", $args);
      break;
    case("Red"):
      $txt = t("Red");
      break;
    case("Blue"):
      $txt = t("Blue");
      break;
    case("Yellow"):
      $txt = t("Yellow");
      break;
    case("Green"):
      $txt = t("Green");
      break;
    case("DRAW_PROPOSAL"):
      $txt = t("The !faction1 side has called for a draw.", $args);
      break;
    case("DRAW_ACCEPTED"):
      $txt = t("The !faction1 side accepted the draw proposal.", $args);
      break;
    case("DRAW_REJECTED"):
      $txt = t("The !faction1 side rejected the draw proposal.", $args);
      break;
    case("MODE_SANDBOX_DESCRIPTION"):
      $txt = t('Sandbox game - you control successively all sides of the game. '
        . 'Useful to discover the Djambi rules, to test alone new strategies, '
        . ' or to play with other people on the same screen.');
      break;
    case("4STD_DESCRIPTION"):
      $txt = t("4 players, standard square grid");
      break;
    case("3STD_DESCRIPTION"):
      $txt = t("3 players, standard square grid, 1 unused team");
      break;
    case("COMEBACK_AFTER_SURROUND"):
      $txt = t("The !faction1 leader is not surrounded anymore by dead pieces. It's a come back for !faction1 side !", $args);
      break;
    case("COMEBACK_AFTER_WITHDRAW"):
      $txt = t("The !faction1 side got some new hope and is back in the game.", $args);
      break;
      /*case(""):
       $txt = t("");
      break;*/
    default:
      $txt = $message;
  }
  return $txt;
}