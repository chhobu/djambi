<?php
/**
 * @file
 * Contient les hooks utilisés pour gérer une partie de Djambi dans un noeud.
 */

use Djambi\Factories\GameDispositionsFactory;
use Djambi\GameManager;
use Djambi\Signal;
use Djambi\Stores\StandardRuleset;
use Drupal\kw_djambi\Djambi\Factories\DjambiNodeGameFactory;
use Drupal\kw_djambi\Djambi\GameManagers\DrupalGameManager;
use Drupal\kw_djambi\Djambi\DjambiContext;

/**
 * Implements hook_menu().
 */
function djambi_node_menu() {
  $items['djambi/check_update/%/%'] = array(
    'page callback' => 'djambi_node_check_update',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['djambi/refresh/%'] = array(
    'page callback' => 'djambi_node_refresh_area',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['djambi'] = array(
    'page callback' => 'djambi_node_start_game',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function djambi_node_permission() {
  return array(
    'administer djambi games' => array(
      'title' => t('Administer djambi games'),
      'description' => t('Perform administrative tasks dealing with djambi games.'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function djambi_node_block_info() {
  $blocks['djambi_games'] = array(
    'info' => t('Djambi games'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['djambi_panel'] = array(
    'info' => t('My Djambi games'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function djambi_node_block_view($delta) {
  $block = array();
  switch ($delta) {
    case('djambi_games'):
      module_load_include('inc', 'djambi_node', 'djambi_node.blocks');
      $block['subject'] = t('Djambi games');
      $block['content'] = module_exists('xautoload') ? _djambi_node_list_games() : '';
      break;

    case('djambi_panel'):
      module_load_include('inc', 'djambi_node', 'djambi_node.blocks');
      $block['subject'] = t('My Djambi games');
      $block['content'] = module_exists('xautoload') ? _djambi_node_list_user_games() : '';
      break;

  }
  return $block;
}

/**
 * Implements hook_block_view_alter().
 */
function djambi_node_block_view_alter(&$data, $block) {
  // On retire l'affichage des blocs de connexion / de déconnexion
  // si l'utilisateur joue une partie :
  if (($block->module == 'user' || $block->delta == 'user-menu') && module_exists('xautoload')) {
    $context = DjambiContext::getInstance();
    $current_game = $context->getCurrentGame();
    if (!empty($current_game) && !$current_game->isFinished()) {
      $check = $context->getUserFaction($current_game->getBattlefield());
      if (!is_null($check)) {
        $data = array();
      }
    }
  }
}

/**
 * Implements hook_cron().
 */
function djambi_node_cron() {
  $q = db_select('djambi_node', 'dj');
  $q->fields('dj', array('nid'));
  $q->condition('dj.autodelete', time(), '<');
  $q->condition('dj.autodelete', 0, '!=');
  $nids = $q->execute()->fetchCol('nid');
  if (!empty($nids)) {
    watchdog('djambi', 'Automatic deletion of Djambi nodes !nids',
      array('!nids' => implode(', ', $nids)));
    node_delete_multiple($nids);
  }
}

/**
 * Implements hook_node_info().
 *
 * Création d'un nouveau type de contenu "partie de Djambi".
 */
function djambi_node_node_info() {
  return array(
    'djambi' => array(
      'name' => t('Djambi game'),
      'base' => 'node_content',
      'description' => t('Create a new machiavelli chess game.'),
      'has_title' => FALSE,
      'locked' => TRUE,
    ),
  );
}

/**
 * Implements hook_node_insert().
 */
function djambi_node_node_insert($node) {
  if ($node->type == 'djambi') {
    $context = DjambiContext::getInstance();
    /* @var \Drupal\kw_djambi\Djambi\GameManagers\DrupalGameManager $gm */
    $gm = $context->getCurrentGame();
    $gm->setInfo('nid', $node->nid);
    $gm->save('node_creation');
  }
}

/**
 * Implements hook_node_view().
 */
function djambi_node_node_view($node, $view_mode) {
  if ($node->type == 'djambi' && $view_mode == 'full') {
    $node->content['grid'] = drupal_get_form('djambi_node_game_form', $node);
  }
}

/**
 * Implements hook_node_delete().
 */
function djambi_node_node_delete($node) {
  if ($node->type == 'djambi') {
    db_delete("djambi_users")->condition("nid", $node->nid)->execute();
    db_delete("djambi_node")->condition("nid", $node->nid)->execute();
  }
}

/**
 * Implements hook_user_delete().
 */
function djambi_node_user_delete($account) {
  db_update("djambi_users")
    ->fields(array('uid' => 0))
    ->condition('uid', $account->uid)
    ->execute();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function djambi_node_form_djambi_node_form_alter(&$form, &$form_state) {
  $context = DjambiContext::getInstance();
  if (!$form["nid"]["#value"]) {
    $form['actions']['submit']['#value'] = t('Begin game');
    $form['basics'] = array(
      '#type' => 'fieldset',
      '#title' => t('Game presets'),
    );
    $dispositions = GameDispositionsFactory::listPublicDispositions();
    foreach ($dispositions as $option => $description) {
      $dispositions[$option] = _kw_djambi_get_translatable_messages($description);
    }
    $form['basics']['nb_players'] = array(
      '#type' => 'radios',
      '#title' => t('Number of players'),
      '#default_value' => isset($dispositions['4std']) ? '4std' : key($dispositions),
      '#options' => $dispositions,
      '#required' => TRUE,
    );
    $mode_options = array();
    $mode_descriptions = GameManager::getModes(TRUE);
    $allowed_modes = $context->getCurrentUser()->getNewGameAllowedModes();
    foreach ($allowed_modes as $mode) {
      if (isset($mode_descriptions[$mode])) {
        $mode_options[$mode] = _kw_djambi_get_translatable_messages($mode_descriptions[$mode]);
      }
    }
    if (empty($mode_options) || (isset($_GET['mode']) && !in_array($_GET['mode'], $allowed_modes))) {
      drupal_access_denied();
      die();
    }
    if (isset($_GET['mode']) && isset($mode_options[$_GET['mode']])) {
      $default_mode = $_GET['mode'];
    }
    else {
      $default_mode = DrupalGameManager::MODE_FRIENDLY;
    }
    $form['basics']['mode'] = array(
      '#type' => 'radios',
      '#title' => t('Game mode'),
      '#default_value' => isset($mode_options[$default_mode]) ? $default_mode : key($mode_options),
      '#options' => $mode_options,
      '#required' => TRUE,
    );
    $form['advanced'] = array(
      '#type' => 'fieldset',
      '#title' => t('Advanced options'),
      '#tree' => TRUE,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['#attached']['css'][] = drupal_get_path('module', 'kw_djambi') . '/css/kw_djambi.css';
    $options_store = new StandardRuleset();
    $nb_rule = 0;
    $nb_option = 0;
    /* @var \Djambi\GameOption $data */
    foreach ($options_store->getAllGameOptions() as $data) {
      $option = $data->getName();
      if ($data->isConfigurable()) {
        $form['advanced'][$option] = array(
          '#type' => $data->getWidget(),
          '#default_value' => isset($_GET[$option]) ? $_GET[$option] : $data->getDefault(),
        );
        $title = $data->getTitle();
        if (!empty($title)) {
          $form['advanced'][$option]['#title'] = _kw_djambi_get_translatable_messages($title);
        }
        if ($data->getType() == 'rule_variant') {
          $nb_rule++;
          $form['advanced'][$option]['#title'] .= '<span class="rule-variant">'
          . t('Rule variant #!number', array(
            '!number' => str_pad($nb_rule, 2, '0', STR_PAD_LEFT),
          )) . '</span>';
        }
        elseif ($data->getType() == 'game_option') {
          $nb_option++;
          $form['advanced'][$option]['#title'] .= '<span class="game-option">'
          . t('Game option #!number', array(
            '!number' => str_pad($nb_option, 2, '0', STR_PAD_LEFT),
          )) . '</span>';
        }
        $form['advanced'][$option]['#required'] = TRUE;
        if (in_array($data->getWidget(), array('radios', 'select'))) {
          $choices = array();
          foreach ($data->getChoices() as $choice_key => $description) {
            $choices[$choice_key] = _kw_djambi_get_translatable_messages($description, array('!value' => $choice_key));
          }
          if (isset($_GET[$option]) && !isset($choices[$_GET[$option]])) {
            $form['advanced'][$option]['#default_value'] = $data->getDefault();
          }
          $form['advanced'][$option]['#options'] = $choices;
        }
        $modes = $data->getModes();
        if (!empty($modes)) {
          foreach ($mode_options as $mode => $desc) {
            if (!in_array($mode, $data->getModes())) {
              $form['advanced'][$option]['#states']['invisible'][':input[name="mode"]'] = array('value' => $mode);
            }
          }
        }
      }
    }
    $form['#submit'] = array('djambi_node_form_djambi_node_new_game_submit');
  }
  else {
    $node = $form["#node"];
    if (user_access('administer djambi games')) {
      try {
        $gm = DrupalGameManager::loadGame(array('nid' => $node->nid));
      }
      catch (Exception $e) {
        $gm = FALSE;
      }
      if ($gm) {
        $form['no_autodelete'] = array(
          '#type' => 'checkbox',
          '#title' => t('Do not autodelete this game'),
          '#description' => t('Finished or inactive games are automatically removed after an amount of time. Check this box to keep this game alive forever.'),
          '#default_value' => $gm->getAutodeleteTime() == 0 ? 1 : 0,
          '#return_value' => 1,
        );
        $form['#submit'][] = 'djambi_node_form_djambi_node_extra_submit';
      }
    }
  }
}

/**
 * Soumission d'un formulaire de création de contenu de type kw_djambi.
 *
 * Traitement des champs réservés aux administrateurs.
 */
function djambi_node_form_djambi_node_extra_submit($form, &$form_state) {
  if (user_access('administer djambi games') && isset($form_state['values']['no_autodelete'])) {
    /* @var \Drupal\kw_djambi\Djambi\GameManagers\DrupalGameManager $gm */
    $gm = DjambiContext::getInstance()->getCurrentGame();
    db_update('djambi_node')
    ->fields(array(
      'autodelete' => $form_state['values']['no_autodelete'] == 1 ? 0 : $gm->getAutodeleteTime(),
    ))
    ->condition('nid', $form['#node']->nid)
    ->execute();
  }
}

/**
 * Soumission d'un formulaire de création de contenu de type kw_djambi.
 *
 * Création d'une nouvelle partie
 */
function djambi_node_form_djambi_node_new_game_submit($form, &$form_state) {
  $gm = DrupalGameManager::createFromNodeForm($form_state, $form['#node']);
  DjambiContext::getInstance()->setCurrentGame($gm);
}

/**
 * Vérifie si un contenu de type kw_djambi a été mis à jour.
 */
function djambi_node_check_update($nid, $version) {
  if (empty($nid) || empty($version)) {
    return;
  }
  $result = array('nid' => $nid);
  $return['changed'] = DrupalGameManager::isReadyForUpdate($result, $version);
  if (!$return['changed']) {
    $context = DjambiContext::getInstance();
    $return['status'] = $result['status'];
    $return['time-elapsed'] = _kw_djambi_get_duration(time() - $result['changed']);
    $return['time-last-update'] = format_date(time(), 'custom', 'H:i:s');
    $query = db_select('djambi_users', 'u')
      ->fields('u')
      ->condition('u.nid', $nid)
      ->isNotNull('u.uid');
    $players = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    $cookie = $context->getDjambiCookie();
    foreach ($players as $player) {
      $data = unserialize($player['data']);
      if (($player['uid'] > 0 && $context->getCurrentUser()->getUser()->uid == $player['uid'])
        || (!empty($cookie) && $player['cookie'] == $cookie)) {
        $record['data'] = Signal::createSignal($context->getCurrentUser(), $context->getIp())->toArray();
        $record['nid'] = $nid;
        $record['faction'] = $player['faction'];
        drupal_write_record('djambi_users', $record, array('nid', 'faction'));
        $return['user-faction'] = $player['faction'];
      }
      if (!empty($data['ping'])) {
        $ping = _kw_djambi_format_ping_infos($data['ping']);
        $return['pings'][$player['faction']] = array(
          'status' => $ping['status'],
          'title' => $ping['title'],
          'class' => $ping['class'],
        );
        if (isset($player['joined'])) {
          $return['pings'][$player['faction']]['joined'] = format_interval(time() - $player['joined']);
        }
      }
    }
  }
  else {
    // Récupération des données concernant le dernier mouvement :
    try {
      $grid = DrupalGameManager::loadGame(array('nid' => $nid))->getBattlefield();
    }
    catch (Exception $e) {
      drupal_json_output($return);
      die();
    }
    $user = DjambiContext::getInstance()->getCurrentUser()->getUser();
    if ($user->uid > 0 && isset($user->data['djambi_show_moves'])) {
      $show_moves = $user->data['djambi_show_moves'];
    }
    elseif (isset($_SESSION['djambi']['show_moves'])) {
      $show_moves = $_SESSION['djambi']['show_moves'];
    }
    else {
      $show_moves = TRUE;
    }
    $return = array_merge($return, $grid->returnLastMoveData($version, $show_moves, '_kw_djambi_describe_move'));
  }
  drupal_json_output($return);
}

/**
 * Formulaire créant une grille de Djambi à partir d'un noeud.
 */
function djambi_node_game_form($form, &$form_state, $node) {
  $factory = new DjambiNodeGameFactory($node);
  $game = $factory->generateGameUsingDrupalForm($form, $form_state);
  if (!empty($game)) {
    module_load_include('inc', 'djambi_node', 'djambi_node.blocks');
    if ($game->getMode() != DrupalGameManager::MODE_SANDBOX) {
      if (!$game->isNotBegin()) {
        $navigation = _djambi_node_list_viewable_games(NULL, $node->nid);
      }
      else {
        $navigation = _djambi_node_list_recruiting_games($node->nid);
      }
      $form['navigation'] = array(
        '#markup' => drupal_render($navigation),
        '#weight' => 100,
      );
    }
  }
  return $form;
}

/**
 * Callback permettant la création rapide d'une partie.
 */
function djambi_node_start_game() {
  // Recherche d'une partie en attente :
  $context = DjambiContext::getInstance();
  $allowed_modes = $context->getCurrentUser()->getNewGameAllowedModes();
  $new_game = db_query('SELECT dn.nid FROM {djambi_node} dn
      WHERE dn.status = :status AND dn.autodelete > :time
      ORDER BY dn.changed DESC LIMIT 0,1',
    array(':status' => DrupalGameManager::STATUS_RECRUITING, ':time' => time()))->fetch();
  if (!empty($new_game) && count($allowed_modes) > 0) {
    drupal_set_message(t("We found a game still recruiting players. You may also !create_link.",
      array('!create_link' => l(t('create your own new game'), 'node/add/djambi')))
    );
    drupal_goto('node/' . $new_game->nid);
  }
  // Si aucune partie, redirection vers l'interface de création de partie :
  drupal_goto('node/add/djambi');
}

/**
 * Callback : fonction permettant de rafraîchir une zone de l'écran.
 */
function djambi_node_refresh_area($id) {
  switch ($id) {
    case('my-games-panel'):
      module_load_include('inc', 'djambi_node', 'djambi_node.blocks');
      $callback = '_djambi_node_list_user_games';
      $args = array(arg(3));
      $fragment = 'block-djambi-node-djambi-panel';
      $target = '#' . $fragment . ' .content';
      break;

    default:
      drupal_access_denied();
      die();
  }
  if (!empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') {
    $ajax = TRUE;
  }
  else {
    $ajax = FALSE;
  }
  if ($ajax) {
    $output = call_user_func_array($callback, $args);
    $commands[] = ajax_command_html($target, drupal_render($output));
    $page = array('#type' => 'ajax', '#commands' => $commands);
    ajax_deliver($page);
  }
  else {
    drupal_goto('', array(
      'query' => drupal_get_destination(),
      'fragment' => isset($fragment) ? $fragment : '',
    ));
  }
}
